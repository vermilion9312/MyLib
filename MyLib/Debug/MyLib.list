
MyLib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005250  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080053e0  080053e0  000063e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005440  08005440  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005440  08005440  00006440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005448  08005448  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005448  08005448  00006448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800544c  0800544c  0000644c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005450  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00004b50  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004bb0  20004bb0  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138aa  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc1  00000000  00000000  0001a93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  0001d900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd7  00000000  00000000  0001eb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a75  00000000  00000000  0001f8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ae4  00000000  00000000  00023354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3030  00000000  00000000  00036e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109e68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e3c  00000000  00000000  00109eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0010ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053c8 	.word	0x080053c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080053c8 	.word	0x080053c8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fb6c 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f818 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8ce 	bl	80006a8 <MX_GPIO_Init>
  MX_TIM10_Init();
 800050c:	f000 f87e 	bl	800060c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000510:	f002 f8d4 	bl	80026bc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000514:	4a05      	ldr	r2, [pc, #20]	@ (800052c <main+0x30>)
 8000516:	2100      	movs	r1, #0
 8000518:	4805      	ldr	r0, [pc, #20]	@ (8000530 <main+0x34>)
 800051a:	f002 f919 	bl	8002750 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <main+0x38>)
 8000522:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000524:	f002 f8ee 	bl	8002704 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <main+0x2c>
 800052c:	08005404 	.word	0x08005404
 8000530:	08000845 	.word	0x08000845
 8000534:	200000c4 	.word	0x200000c4

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	@ 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	@ 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 feec 	bl	8005324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b28      	ldr	r3, [pc, #160]	@ (8000604 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	4a27      	ldr	r2, [pc, #156]	@ (8000604 <SystemClock_Config+0xcc>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	@ 0x40
 800056c:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b22      	ldr	r3, [pc, #136]	@ (8000608 <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a21      	ldr	r2, [pc, #132]	@ (8000608 <SystemClock_Config+0xd0>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a8:	2308      	movs	r3, #8
 80005aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005ac:	23a8      	movs	r3, #168	@ 0xa8
 80005ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fde7 	bl	8001190 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c8:	f000 f964 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2105      	movs	r1, #5
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 f848 	bl	8001680 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005f6:	f000 f94d 	bl	8000894 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	@ 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
 8000620:	615a      	str	r2, [r3, #20]
 8000622:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000624:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <MX_TIM10_Init+0x94>)
 8000626:	4a1f      	ldr	r2, [pc, #124]	@ (80006a4 <MX_TIM10_Init+0x98>)
 8000628:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800062a:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <MX_TIM10_Init+0x94>)
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <MX_TIM10_Init+0x94>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000636:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_TIM10_Init+0x94>)
 8000638:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800063c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063e:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_TIM10_Init+0x94>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_TIM10_Init+0x94>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800064a:	4815      	ldr	r0, [pc, #84]	@ (80006a0 <MX_TIM10_Init+0x94>)
 800064c:	f001 fa16 	bl	8001a7c <HAL_TIM_Base_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000656:	f000 f91d 	bl	8000894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800065a:	4811      	ldr	r0, [pc, #68]	@ (80006a0 <MX_TIM10_Init+0x94>)
 800065c:	f001 face 	bl	8001bfc <HAL_TIM_PWM_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000666:	f000 f915 	bl	8000894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800066a:	2360      	movs	r3, #96	@ 0x60
 800066c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2200      	movs	r2, #0
 800067e:	4619      	mov	r1, r3
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <MX_TIM10_Init+0x94>)
 8000682:	f001 fc05 	bl	8001e90 <HAL_TIM_PWM_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800068c:	f000 f902 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000690:	4803      	ldr	r0, [pc, #12]	@ (80006a0 <MX_TIM10_Init+0x94>)
 8000692:	f000 f959 	bl	8000948 <HAL_TIM_MspPostInit>

}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000007c 	.word	0x2000007c
 80006a4:	40014400 	.word	0x40014400

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	@ 0x30
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
 80006c2:	4b5b      	ldr	r3, [pc, #364]	@ (8000830 <MX_GPIO_Init+0x188>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a5a      	ldr	r2, [pc, #360]	@ (8000830 <MX_GPIO_Init+0x188>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b58      	ldr	r3, [pc, #352]	@ (8000830 <MX_GPIO_Init+0x188>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	4b54      	ldr	r3, [pc, #336]	@ (8000830 <MX_GPIO_Init+0x188>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a53      	ldr	r2, [pc, #332]	@ (8000830 <MX_GPIO_Init+0x188>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b51      	ldr	r3, [pc, #324]	@ (8000830 <MX_GPIO_Init+0x188>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b4d      	ldr	r3, [pc, #308]	@ (8000830 <MX_GPIO_Init+0x188>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a4c      	ldr	r2, [pc, #304]	@ (8000830 <MX_GPIO_Init+0x188>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b4a      	ldr	r3, [pc, #296]	@ (8000830 <MX_GPIO_Init+0x188>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b46      	ldr	r3, [pc, #280]	@ (8000830 <MX_GPIO_Init+0x188>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a45      	ldr	r2, [pc, #276]	@ (8000830 <MX_GPIO_Init+0x188>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b43      	ldr	r3, [pc, #268]	@ (8000830 <MX_GPIO_Init+0x188>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b3f      	ldr	r3, [pc, #252]	@ (8000830 <MX_GPIO_Init+0x188>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a3e      	ldr	r2, [pc, #248]	@ (8000830 <MX_GPIO_Init+0x188>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b3c      	ldr	r3, [pc, #240]	@ (8000830 <MX_GPIO_Init+0x188>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b38      	ldr	r3, [pc, #224]	@ (8000830 <MX_GPIO_Init+0x188>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a37      	ldr	r2, [pc, #220]	@ (8000830 <MX_GPIO_Init+0x188>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b35      	ldr	r3, [pc, #212]	@ (8000830 <MX_GPIO_Init+0x188>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RIGHT_BLUE_Pin|RIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2121      	movs	r1, #33	@ 0x21
 800076a:	4832      	ldr	r0, [pc, #200]	@ (8000834 <MX_GPIO_Init+0x18c>)
 800076c:	f000 fcf6 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEFT_RED_Pin|LEFT_GREEN_Pin|LEFT_BLUE_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000776:	4830      	ldr	r0, [pc, #192]	@ (8000838 <MX_GPIO_Init+0x190>)
 8000778:	f000 fcf0 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RIGHT_RED_GPIO_Port, RIGHT_RED_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2140      	movs	r1, #64	@ 0x40
 8000780:	482e      	ldr	r0, [pc, #184]	@ (800083c <MX_GPIO_Init+0x194>)
 8000782:	f000 fceb 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 8000786:	2308      	movs	r3, #8
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4829      	ldr	r0, [pc, #164]	@ (8000840 <MX_GPIO_Init+0x198>)
 800079a:	f000 fb43 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin;
 800079e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_2_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	4822      	ldr	r0, [pc, #136]	@ (800083c <MX_GPIO_Init+0x194>)
 80007b4:	f000 fb36 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_BLUE_Pin RIGHT_GREEN_Pin */
  GPIO_InitStruct.Pin = RIGHT_BLUE_Pin|RIGHT_GREEN_Pin;
 80007b8:	2321      	movs	r3, #33	@ 0x21
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c4:	2302      	movs	r3, #2
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4819      	ldr	r0, [pc, #100]	@ (8000834 <MX_GPIO_Init+0x18c>)
 80007d0:	f000 fb28 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_3_Pin;
 80007d4:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4813      	ldr	r0, [pc, #76]	@ (8000838 <MX_GPIO_Init+0x190>)
 80007ea:	f000 fb1b 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_RED_Pin LEFT_GREEN_Pin LEFT_BLUE_Pin */
  GPIO_InitStruct.Pin = LEFT_RED_Pin|LEFT_GREEN_Pin|LEFT_BLUE_Pin;
 80007ee:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	480c      	ldr	r0, [pc, #48]	@ (8000838 <MX_GPIO_Init+0x190>)
 8000808:	f000 fb0c 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_RED_Pin */
  GPIO_InitStruct.Pin = RIGHT_RED_Pin;
 800080c:	2340      	movs	r3, #64	@ 0x40
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000818:	2302      	movs	r3, #2
 800081a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	@ (800083c <MX_GPIO_Init+0x194>)
 8000824:	f000 fafe 	bl	8000e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3730      	adds	r7, #48	@ 0x30
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020400 	.word	0x40020400
 8000838:	40020c00 	.word	0x40020c00
 800083c:	40020800 	.word	0x40020800
 8000840:	40021000 	.word	0x40021000

08000844 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	Output* left_red = new_Output(LEFT_RED_GPIO_Port, LEFT_RED_Pin);
 800084c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000850:	4806      	ldr	r0, [pc, #24]	@ (800086c <StartDefaultTask+0x28>)
 8000852:	f001 feb9 	bl	80025c8 <new_Output>
 8000856:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  left_red->toggle(left_red);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	4798      	blx	r3
	  osDelay(1000);
 8000860:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000864:	f002 f806 	bl	8002874 <osDelay>
	  left_red->toggle(left_red);
 8000868:	bf00      	nop
 800086a:	e7f5      	b.n	8000858 <StartDefaultTask+0x14>
 800086c:	40020c00 	.word	0x40020c00

08000870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a04      	ldr	r2, [pc, #16]	@ (8000890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d101      	bne.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000882:	f000 f9cd 	bl	8000c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40010000 	.word	0x40010000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <Error_Handler+0x8>

080008a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <HAL_MspInit+0x54>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	4a11      	ldr	r2, [pc, #68]	@ (80008f4 <HAL_MspInit+0x54>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <HAL_MspInit+0x54>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <HAL_MspInit+0x54>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <HAL_MspInit+0x54>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <HAL_MspInit+0x54>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	210f      	movs	r1, #15
 80008e2:	f06f 0001 	mvn.w	r0, #1
 80008e6:	f000 fa73 	bl	8000dd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <HAL_TIM_Base_MspInit+0x48>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d115      	bne.n	8000936 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <HAL_TIM_Base_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	4a0c      	ldr	r2, [pc, #48]	@ (8000944 <HAL_TIM_Base_MspInit+0x4c>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000918:	6453      	str	r3, [r2, #68]	@ 0x44
 800091a:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <HAL_TIM_Base_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	210f      	movs	r1, #15
 800092a:	2019      	movs	r0, #25
 800092c:	f000 fa50 	bl	8000dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000930:	2019      	movs	r0, #25
 8000932:	f000 fa69 	bl	8000e08 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM10_MspInit 1 */

  }

}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40014400 	.word	0x40014400
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <HAL_TIM_MspPostInit+0x68>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d11e      	bne.n	80009a8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM10_MspPostInit 0 */

    /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <HAL_TIM_MspPostInit+0x6c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a10      	ldr	r2, [pc, #64]	@ (80009b4 <HAL_TIM_MspPostInit+0x6c>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_TIM_MspPostInit+0x6c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000986:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800098a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000998:	2303      	movs	r3, #3
 800099a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <HAL_TIM_MspPostInit+0x70>)
 80009a4:	f000 fa3e 	bl	8000e24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM10_MspPostInit 1 */

    /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40014400 	.word	0x40014400
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400

080009bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	@ 0x30
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a90 <HAL_InitTick+0xd4>)
 80009d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000a90 <HAL_InitTick+0xd4>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6453      	str	r3, [r2, #68]	@ 0x44
 80009dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000a90 <HAL_InitTick+0xd4>)
 80009de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e8:	f107 020c 	add.w	r2, r7, #12
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 f810 	bl	8001a18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009f8:	f000 fffa 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 80009fc:	4603      	mov	r3, r0
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a04:	4a23      	ldr	r2, [pc, #140]	@ (8000a94 <HAL_InitTick+0xd8>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0c9b      	lsrs	r3, r3, #18
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a10:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <HAL_InitTick+0xdc>)
 8000a12:	4a22      	ldr	r2, [pc, #136]	@ (8000a9c <HAL_InitTick+0xe0>)
 8000a14:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a16:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <HAL_InitTick+0xdc>)
 8000a18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a1c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a98 <HAL_InitTick+0xdc>)
 8000a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a22:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <HAL_InitTick+0xdc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <HAL_InitTick+0xdc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <HAL_InitTick+0xdc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a36:	4818      	ldr	r0, [pc, #96]	@ (8000a98 <HAL_InitTick+0xdc>)
 8000a38:	f001 f820 	bl	8001a7c <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d11b      	bne.n	8000a82 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a4a:	4813      	ldr	r0, [pc, #76]	@ (8000a98 <HAL_InitTick+0xdc>)
 8000a4c:	f001 f866 	bl	8001b1c <HAL_TIM_Base_Start_IT>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d111      	bne.n	8000a82 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a5e:	2019      	movs	r0, #25
 8000a60:	f000 f9d2 	bl	8000e08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b0f      	cmp	r3, #15
 8000a68:	d808      	bhi.n	8000a7c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	2019      	movs	r0, #25
 8000a70:	f000 f9ae 	bl	8000dd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a74:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <HAL_InitTick+0xe4>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
 8000a7a:	e002      	b.n	8000a82 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3730      	adds	r7, #48	@ 0x30
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	431bde83 	.word	0x431bde83
 8000a98:	200000c8 	.word	0x200000c8
 8000a9c:	40010000 	.word	0x40010000
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ae0:	4803      	ldr	r0, [pc, #12]	@ (8000af0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000ae2:	f001 f8e4 	bl	8001cae <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000ae6:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000ae8:	f001 f8e1 	bl	8001cae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200000c8 	.word	0x200000c8
 8000af4:	2000007c 	.word	0x2000007c

08000af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b00:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <_sbrk+0x5c>)
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <_sbrk+0x60>)
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b0c:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b14:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <_sbrk+0x64>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <_sbrk+0x68>)
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1a:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d207      	bcs.n	8000b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b28:	f004 fc14 	bl	8005354 <__errno>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	220c      	movs	r2, #12
 8000b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	e009      	b.n	8000b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <_sbrk+0x64>)
 8000b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20020000 	.word	0x20020000
 8000b58:	00000400 	.word	0x00000400
 8000b5c:	20000110 	.word	0x20000110
 8000b60:	20004bb0 	.word	0x20004bb0

08000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	@ (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b8c:	f7ff ffea 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	@ (8000bc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f004 fbd3 	bl	8005360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fc9f 	bl	80004fc <main>
  bx  lr    
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bcc:	08005450 	.word	0x08005450
  ldr r2, =_sbss
 8000bd0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bd4:	20004bb0 	.word	0x20004bb0

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <HAL_Init+0x40>)
 8000be6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bec:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <HAL_Init+0x40>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	@ (8000c1c <HAL_Init+0x40>)
 8000bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f8d8 	bl	8000dba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f7ff fed6 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff fe46 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023c00 	.word	0x40023c00

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	@ (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000114 	.word	0x20000114

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	@ (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000114 	.word	0x20000114

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	@ (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	@ (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	@ 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	@ 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ff4c 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de2:	f7ff ff61 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000de6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	6978      	ldr	r0, [r7, #20]
 8000dee:	f7ff ffb1 	bl	8000d54 <NVIC_EncodePriority>
 8000df2:	4602      	mov	r2, r0
 8000df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff80 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff54 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	@ 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e16b      	b.n	8001118 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 815a 	bne.w	8001112 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d005      	beq.n	8000e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d130      	bne.n	8000ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	f003 0201 	and.w	r2, r3, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d017      	beq.n	8000f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80b4 	beq.w	8001112 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b60      	ldr	r3, [pc, #384]	@ (8001130 <HAL_GPIO_Init+0x30c>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	4a5f      	ldr	r2, [pc, #380]	@ (8001130 <HAL_GPIO_Init+0x30c>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fba:	4b5d      	ldr	r3, [pc, #372]	@ (8001130 <HAL_GPIO_Init+0x30c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001134 <HAL_GPIO_Init+0x310>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a52      	ldr	r2, [pc, #328]	@ (8001138 <HAL_GPIO_Init+0x314>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d02b      	beq.n	800104a <HAL_GPIO_Init+0x226>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a51      	ldr	r2, [pc, #324]	@ (800113c <HAL_GPIO_Init+0x318>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d025      	beq.n	8001046 <HAL_GPIO_Init+0x222>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a50      	ldr	r2, [pc, #320]	@ (8001140 <HAL_GPIO_Init+0x31c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d01f      	beq.n	8001042 <HAL_GPIO_Init+0x21e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4f      	ldr	r2, [pc, #316]	@ (8001144 <HAL_GPIO_Init+0x320>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x21a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4e      	ldr	r2, [pc, #312]	@ (8001148 <HAL_GPIO_Init+0x324>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x216>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4d      	ldr	r2, [pc, #308]	@ (800114c <HAL_GPIO_Init+0x328>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x212>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4c      	ldr	r2, [pc, #304]	@ (8001150 <HAL_GPIO_Init+0x32c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x20e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4b      	ldr	r2, [pc, #300]	@ (8001154 <HAL_GPIO_Init+0x330>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x20a>
 800102a:	2307      	movs	r3, #7
 800102c:	e00e      	b.n	800104c <HAL_GPIO_Init+0x228>
 800102e:	2308      	movs	r3, #8
 8001030:	e00c      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001032:	2306      	movs	r3, #6
 8001034:	e00a      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001036:	2305      	movs	r3, #5
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x228>
 800103a:	2304      	movs	r3, #4
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x228>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x228>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	@ (8001134 <HAL_GPIO_Init+0x310>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b3b      	ldr	r3, [pc, #236]	@ (8001158 <HAL_GPIO_Init+0x334>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a32      	ldr	r2, [pc, #200]	@ (8001158 <HAL_GPIO_Init+0x334>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b30      	ldr	r3, [pc, #192]	@ (8001158 <HAL_GPIO_Init+0x334>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a27      	ldr	r2, [pc, #156]	@ (8001158 <HAL_GPIO_Init+0x334>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010be:	4b26      	ldr	r3, [pc, #152]	@ (8001158 <HAL_GPIO_Init+0x334>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001158 <HAL_GPIO_Init+0x334>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <HAL_GPIO_Init+0x334>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110c:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <HAL_GPIO_Init+0x334>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f ae90 	bls.w	8000e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40021400 	.word	0x40021400
 8001150:	40021800 	.word	0x40021800
 8001154:	40021c00 	.word	0x40021c00
 8001158:	40013c00 	.word	0x40013c00

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001178:	e003      	b.n	8001182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	041a      	lsls	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	619a      	str	r2, [r3, #24]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e267      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d075      	beq.n	800129a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ae:	4b88      	ldr	r3, [pc, #544]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d00c      	beq.n	80011d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ba:	4b85      	ldr	r3, [pc, #532]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d112      	bne.n	80011ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c6:	4b82      	ldr	r3, [pc, #520]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011d2:	d10b      	bne.n	80011ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	4b7e      	ldr	r3, [pc, #504]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d05b      	beq.n	8001298 <HAL_RCC_OscConfig+0x108>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d157      	bne.n	8001298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e242      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011f4:	d106      	bne.n	8001204 <HAL_RCC_OscConfig+0x74>
 80011f6:	4b76      	ldr	r3, [pc, #472]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a75      	ldr	r2, [pc, #468]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e01d      	b.n	8001240 <HAL_RCC_OscConfig+0xb0>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x98>
 800120e:	4b70      	ldr	r3, [pc, #448]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6f      	ldr	r2, [pc, #444]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b6d      	ldr	r3, [pc, #436]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a6c      	ldr	r2, [pc, #432]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e00b      	b.n	8001240 <HAL_RCC_OscConfig+0xb0>
 8001228:	4b69      	ldr	r3, [pc, #420]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a68      	ldr	r2, [pc, #416]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800122e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b66      	ldr	r3, [pc, #408]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a65      	ldr	r2, [pc, #404]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d013      	beq.n	8001270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fcfe 	bl	8000c48 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fcfa 	bl	8000c48 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	@ 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e207      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b5b      	ldr	r3, [pc, #364]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0xc0>
 800126e:	e014      	b.n	800129a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fcea 	bl	8000c48 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fce6 	bl	8000c48 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	@ 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e1f3      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	4b51      	ldr	r3, [pc, #324]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0xe8>
 8001296:	e000      	b.n	800129a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d063      	beq.n	800136e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012a6:	4b4a      	ldr	r3, [pc, #296]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00b      	beq.n	80012ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b2:	4b47      	ldr	r3, [pc, #284]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d11c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012be:	4b44      	ldr	r3, [pc, #272]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d116      	bne.n	80012f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ca:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <HAL_RCC_OscConfig+0x152>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e1c7      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e2:	4b3b      	ldr	r3, [pc, #236]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4937      	ldr	r1, [pc, #220]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f6:	e03a      	b.n	800136e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d020      	beq.n	8001342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001300:	4b34      	ldr	r3, [pc, #208]	@ (80013d4 <HAL_RCC_OscConfig+0x244>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001306:	f7ff fc9f 	bl	8000c48 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff fc9b 	bl	8000c48 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e1a8      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132c:	4b28      	ldr	r3, [pc, #160]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4925      	ldr	r1, [pc, #148]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
 8001340:	e015      	b.n	800136e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <HAL_RCC_OscConfig+0x244>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fc7e 	bl	8000c48 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff fc7a 	bl	8000c48 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e187      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d036      	beq.n	80013e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d016      	beq.n	80013b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <HAL_RCC_OscConfig+0x248>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001388:	f7ff fc5e 	bl	8000c48 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff fc5a 	bl	8000c48 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e167      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <HAL_RCC_OscConfig+0x240>)
 80013a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x200>
 80013ae:	e01b      	b.n	80013e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <HAL_RCC_OscConfig+0x248>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fc47 	bl	8000c48 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	e00e      	b.n	80013dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013be:	f7ff fc43 	bl	8000c48 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d907      	bls.n	80013dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e150      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
 80013d0:	40023800 	.word	0x40023800
 80013d4:	42470000 	.word	0x42470000
 80013d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	4b88      	ldr	r3, [pc, #544]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80013de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ea      	bne.n	80013be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 8097 	beq.w	8001524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fa:	4b81      	ldr	r3, [pc, #516]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10f      	bne.n	8001426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b7d      	ldr	r3, [pc, #500]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	4a7c      	ldr	r2, [pc, #496]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	@ 0x40
 8001416:	4b7a      	ldr	r3, [pc, #488]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001422:	2301      	movs	r3, #1
 8001424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001426:	4b77      	ldr	r3, [pc, #476]	@ (8001604 <HAL_RCC_OscConfig+0x474>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142e:	2b00      	cmp	r3, #0
 8001430:	d118      	bne.n	8001464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001432:	4b74      	ldr	r3, [pc, #464]	@ (8001604 <HAL_RCC_OscConfig+0x474>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a73      	ldr	r2, [pc, #460]	@ (8001604 <HAL_RCC_OscConfig+0x474>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143e:	f7ff fc03 	bl	8000c48 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001446:	f7ff fbff 	bl	8000c48 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e10c      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001458:	4b6a      	ldr	r3, [pc, #424]	@ (8001604 <HAL_RCC_OscConfig+0x474>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x2ea>
 800146c:	4b64      	ldr	r3, [pc, #400]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001470:	4a63      	ldr	r2, [pc, #396]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6713      	str	r3, [r2, #112]	@ 0x70
 8001478:	e01c      	b.n	80014b4 <HAL_RCC_OscConfig+0x324>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b05      	cmp	r3, #5
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x30c>
 8001482:	4b5f      	ldr	r3, [pc, #380]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001486:	4a5e      	ldr	r2, [pc, #376]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6713      	str	r3, [r2, #112]	@ 0x70
 800148e:	4b5c      	ldr	r3, [pc, #368]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001492:	4a5b      	ldr	r2, [pc, #364]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6713      	str	r3, [r2, #112]	@ 0x70
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0x324>
 800149c:	4b58      	ldr	r3, [pc, #352]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a0:	4a57      	ldr	r2, [pc, #348]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014a8:	4b55      	ldr	r3, [pc, #340]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ac:	4a54      	ldr	r2, [pc, #336]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80014ae:	f023 0304 	bic.w	r3, r3, #4
 80014b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d015      	beq.n	80014e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fbc4 	bl	8000c48 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c2:	e00a      	b.n	80014da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c4:	f7ff fbc0 	bl	8000c48 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e0cb      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014da:	4b49      	ldr	r3, [pc, #292]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0ee      	beq.n	80014c4 <HAL_RCC_OscConfig+0x334>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff fbae 	bl	8000c48 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f0:	f7ff fbaa 	bl	8000c48 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e0b5      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001506:	4b3e      	ldr	r3, [pc, #248]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1ee      	bne.n	80014f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001518:	4b39      	ldr	r3, [pc, #228]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	4a38      	ldr	r2, [pc, #224]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001522:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80a1 	beq.w	8001670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800152e:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b08      	cmp	r3, #8
 8001538:	d05c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d141      	bne.n	80015c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001542:	4b31      	ldr	r3, [pc, #196]	@ (8001608 <HAL_RCC_OscConfig+0x478>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fb7e 	bl	8000c48 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff fb7a 	bl	8000c48 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e087      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001562:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69da      	ldr	r2, [r3, #28]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157c:	019b      	lsls	r3, r3, #6
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	3b01      	subs	r3, #1
 8001588:	041b      	lsls	r3, r3, #16
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001590:	061b      	lsls	r3, r3, #24
 8001592:	491b      	ldr	r1, [pc, #108]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <HAL_RCC_OscConfig+0x478>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff fb53 	bl	8000c48 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff fb4f 	bl	8000c48 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e05c      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x416>
 80015c4:	e054      	b.n	8001670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_RCC_OscConfig+0x478>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fb3c 	bl	8000c48 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff fb38 	bl	8000c48 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e045      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_RCC_OscConfig+0x470>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x444>
 80015f2:	e03d      	b.n	8001670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d107      	bne.n	800160c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e038      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000
 8001608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <HAL_RCC_OscConfig+0x4ec>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d028      	beq.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001624:	429a      	cmp	r2, r3
 8001626:	d121      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	429a      	cmp	r2, r3
 8001634:	d11a      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800163c:	4013      	ands	r3, r2
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001644:	4293      	cmp	r3, r2
 8001646:	d111      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	3b01      	subs	r3, #1
 8001656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0cc      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b68      	ldr	r3, [pc, #416]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d90c      	bls.n	80016bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b65      	ldr	r3, [pc, #404]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b63      	ldr	r3, [pc, #396]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0b8      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d4:	4b59      	ldr	r3, [pc, #356]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a58      	ldr	r2, [pc, #352]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ec:	4b53      	ldr	r3, [pc, #332]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a52      	ldr	r2, [pc, #328]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b50      	ldr	r3, [pc, #320]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	494d      	ldr	r1, [pc, #308]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d044      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b47      	ldr	r3, [pc, #284]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d119      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e07f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d003      	beq.n	800173e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173a:	2b03      	cmp	r3, #3
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	4b3f      	ldr	r3, [pc, #252]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e06f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4b3b      	ldr	r3, [pc, #236]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e067      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b37      	ldr	r3, [pc, #220]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4934      	ldr	r1, [pc, #208]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff fa6a 	bl	8000c48 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff fa66 	bl	8000c48 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e04f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a0:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d20c      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e032      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4916      	ldr	r1, [pc, #88]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	490e      	ldr	r1, [pc, #56]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001806:	f000 f821 	bl	800184c <HAL_RCC_GetSysClockFreq>
 800180a:	4602      	mov	r2, r0
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	490a      	ldr	r1, [pc, #40]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	5ccb      	ldrb	r3, [r1, r3]
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	4a09      	ldr	r2, [pc, #36]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f8c8 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00
 800183c:	40023800 	.word	0x40023800
 8001840:	08005428 	.word	0x08005428
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800184c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001850:	b090      	sub	sp, #64	@ 0x40
 8001852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001864:	4b59      	ldr	r3, [pc, #356]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x180>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b08      	cmp	r3, #8
 800186e:	d00d      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x40>
 8001870:	2b08      	cmp	r3, #8
 8001872:	f200 80a1 	bhi.w	80019b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x34>
 800187a:	2b04      	cmp	r3, #4
 800187c:	d003      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x3a>
 800187e:	e09b      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001880:	4b53      	ldr	r3, [pc, #332]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001882:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001884:	e09b      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001886:	4b53      	ldr	r3, [pc, #332]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001888:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800188a:	e098      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800188c:	4b4f      	ldr	r3, [pc, #316]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x180>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001894:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001896:	4b4d      	ldr	r3, [pc, #308]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x180>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d028      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a2:	4b4a      	ldr	r3, [pc, #296]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x180>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	099b      	lsrs	r3, r3, #6
 80018a8:	2200      	movs	r2, #0
 80018aa:	623b      	str	r3, [r7, #32]
 80018ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018b4:	2100      	movs	r1, #0
 80018b6:	4b47      	ldr	r3, [pc, #284]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80018b8:	fb03 f201 	mul.w	r2, r3, r1
 80018bc:	2300      	movs	r3, #0
 80018be:	fb00 f303 	mul.w	r3, r0, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	4a43      	ldr	r2, [pc, #268]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80018c6:	fba0 1202 	umull	r1, r2, r0, r2
 80018ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018cc:	460a      	mov	r2, r1
 80018ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80018d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018d2:	4413      	add	r3, r2
 80018d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018d8:	2200      	movs	r2, #0
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	61fa      	str	r2, [r7, #28]
 80018de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018e6:	f7fe fc73 	bl	80001d0 <__aeabi_uldivmod>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4613      	mov	r3, r2
 80018f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018f2:	e053      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f4:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x180>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	099b      	lsrs	r3, r3, #6
 80018fa:	2200      	movs	r2, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	617a      	str	r2, [r7, #20]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001906:	f04f 0b00 	mov.w	fp, #0
 800190a:	4652      	mov	r2, sl
 800190c:	465b      	mov	r3, fp
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	0159      	lsls	r1, r3, #5
 8001918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191c:	0150      	lsls	r0, r2, #5
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	ebb2 080a 	subs.w	r8, r2, sl
 8001926:	eb63 090b 	sbc.w	r9, r3, fp
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001936:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800193a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800193e:	ebb2 0408 	subs.w	r4, r2, r8
 8001942:	eb63 0509 	sbc.w	r5, r3, r9
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	00eb      	lsls	r3, r5, #3
 8001950:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001954:	00e2      	lsls	r2, r4, #3
 8001956:	4614      	mov	r4, r2
 8001958:	461d      	mov	r5, r3
 800195a:	eb14 030a 	adds.w	r3, r4, sl
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	eb45 030b 	adc.w	r3, r5, fp
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001972:	4629      	mov	r1, r5
 8001974:	028b      	lsls	r3, r1, #10
 8001976:	4621      	mov	r1, r4
 8001978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800197c:	4621      	mov	r1, r4
 800197e:	028a      	lsls	r2, r1, #10
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001986:	2200      	movs	r2, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	60fa      	str	r2, [r7, #12]
 800198c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001990:	f7fe fc1e 	bl	80001d0 <__aeabi_uldivmod>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4613      	mov	r3, r2
 800199a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x180>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	0c1b      	lsrs	r3, r3, #16
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	3301      	adds	r3, #1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80019ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019b6:	e002      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80019ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3740      	adds	r7, #64	@ 0x40
 80019c4:	46bd      	mov	sp, r7
 80019c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	00f42400 	.word	0x00f42400
 80019d4:	017d7840 	.word	0x017d7840

080019d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019dc:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <HAL_RCC_GetHCLKFreq+0x14>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000000 	.word	0x20000000

080019f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019f4:	f7ff fff0 	bl	80019d8 <HAL_RCC_GetHCLKFreq>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	0b5b      	lsrs	r3, r3, #13
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	4903      	ldr	r1, [pc, #12]	@ (8001a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a06:	5ccb      	ldrb	r3, [r1, r3]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800
 8001a14:	08005438 	.word	0x08005438

08001a18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	220f      	movs	r2, #15
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0203 	and.w	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a34:	4b0f      	ldr	r3, [pc, #60]	@ (8001a74 <HAL_RCC_GetClockConfig+0x5c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <HAL_RCC_GetClockConfig+0x5c>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a4c:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	08db      	lsrs	r3, r3, #3
 8001a52:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a5a:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <HAL_RCC_GetClockConfig+0x60>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0207 	and.w	r2, r3, #7
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	601a      	str	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e041      	b.n	8001b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7fe ff28 	bl	80008f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f000 fad2 	bl	8002064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d001      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e04e      	b.n	8001bd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a23      	ldr	r2, [pc, #140]	@ (8001be0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d022      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b5e:	d01d      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1f      	ldr	r2, [pc, #124]	@ (8001be4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d018      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001be8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d013      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1c      	ldr	r2, [pc, #112]	@ (8001bec <HAL_TIM_Base_Start_IT+0xd0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00e      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	@ (8001bf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a18      	ldr	r2, [pc, #96]	@ (8001bf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d111      	bne.n	8001bc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d010      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bbe:	e007      	b.n	8001bd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40010000 	.word	0x40010000
 8001be4:	40000400 	.word	0x40000400
 8001be8:	40000800 	.word	0x40000800
 8001bec:	40000c00 	.word	0x40000c00
 8001bf0:	40010400 	.word	0x40010400
 8001bf4:	40014000 	.word	0x40014000
 8001bf8:	40001800 	.word	0x40001800

08001bfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e041      	b.n	8001c92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f839 	bl	8001c9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f000 fa12 	bl	8002064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01b      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f06f 0202 	mvn.w	r2, #2
 8001ce2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f995 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001cfe:	e005      	b.n	8001d0c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f987 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f998 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d020      	beq.n	8001d5e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d01b      	beq.n	8001d5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f06f 0204 	mvn.w	r2, #4
 8001d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f96f 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001d4a:	e005      	b.n	8001d58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f961 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f972 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01b      	beq.n	8001daa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f06f 0208 	mvn.w	r2, #8
 8001d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f949 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001d96:	e005      	b.n	8001da4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f93b 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f94c 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d01b      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 0210 	mvn.w	r2, #16
 8001dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2208      	movs	r2, #8
 8001dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f923 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001de2:	e005      	b.n	8001df0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f915 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f926 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00c      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f06f 0201 	mvn.w	r2, #1
 8001e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7fe fd2b 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00c      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 fb73 	bl	8002524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00c      	beq.n	8001e62 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f8f7 	bl	8002050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00c      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f06f 0220 	mvn.w	r2, #32
 8001e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fb45 	bl	8002510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e0ae      	b.n	800200c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b0c      	cmp	r3, #12
 8001eba:	f200 809f 	bhi.w	8001ffc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001ef9 	.word	0x08001ef9
 8001ec8:	08001ffd 	.word	0x08001ffd
 8001ecc:	08001ffd 	.word	0x08001ffd
 8001ed0:	08001ffd 	.word	0x08001ffd
 8001ed4:	08001f39 	.word	0x08001f39
 8001ed8:	08001ffd 	.word	0x08001ffd
 8001edc:	08001ffd 	.word	0x08001ffd
 8001ee0:	08001ffd 	.word	0x08001ffd
 8001ee4:	08001f7b 	.word	0x08001f7b
 8001ee8:	08001ffd 	.word	0x08001ffd
 8001eec:	08001ffd 	.word	0x08001ffd
 8001ef0:	08001ffd 	.word	0x08001ffd
 8001ef4:	08001fbb 	.word	0x08001fbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f956 	bl	80021b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0208 	orr.w	r2, r2, #8
 8001f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0204 	bic.w	r2, r2, #4
 8001f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6999      	ldr	r1, [r3, #24]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	619a      	str	r2, [r3, #24]
      break;
 8001f36:	e064      	b.n	8002002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f9a6 	bl	8002290 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6999      	ldr	r1, [r3, #24]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	021a      	lsls	r2, r3, #8
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	619a      	str	r2, [r3, #24]
      break;
 8001f78:	e043      	b.n	8002002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f9fb 	bl	800237c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0208 	orr.w	r2, r2, #8
 8001f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69da      	ldr	r2, [r3, #28]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0204 	bic.w	r2, r2, #4
 8001fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69d9      	ldr	r1, [r3, #28]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	61da      	str	r2, [r3, #28]
      break;
 8001fb8:	e023      	b.n	8002002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fa4f 	bl	8002464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	69da      	ldr	r2, [r3, #28]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69d9      	ldr	r1, [r3, #28]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	021a      	lsls	r2, r3, #8
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	61da      	str	r2, [r3, #28]
      break;
 8001ffa:	e002      	b.n	8002002 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8002000:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800200a:	7dfb      	ldrb	r3, [r7, #23]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a43      	ldr	r2, [pc, #268]	@ (8002184 <TIM_Base_SetConfig+0x120>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002082:	d00f      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a40      	ldr	r2, [pc, #256]	@ (8002188 <TIM_Base_SetConfig+0x124>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00b      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3f      	ldr	r2, [pc, #252]	@ (800218c <TIM_Base_SetConfig+0x128>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a3e      	ldr	r2, [pc, #248]	@ (8002190 <TIM_Base_SetConfig+0x12c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d003      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a3d      	ldr	r2, [pc, #244]	@ (8002194 <TIM_Base_SetConfig+0x130>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d108      	bne.n	80020b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a32      	ldr	r2, [pc, #200]	@ (8002184 <TIM_Base_SetConfig+0x120>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d02b      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c4:	d027      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002188 <TIM_Base_SetConfig+0x124>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d023      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a2e      	ldr	r2, [pc, #184]	@ (800218c <TIM_Base_SetConfig+0x128>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01f      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002190 <TIM_Base_SetConfig+0x12c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01b      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002194 <TIM_Base_SetConfig+0x130>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d017      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002198 <TIM_Base_SetConfig+0x134>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a2a      	ldr	r2, [pc, #168]	@ (800219c <TIM_Base_SetConfig+0x138>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00f      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a29      	ldr	r2, [pc, #164]	@ (80021a0 <TIM_Base_SetConfig+0x13c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00b      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a28      	ldr	r2, [pc, #160]	@ (80021a4 <TIM_Base_SetConfig+0x140>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a27      	ldr	r2, [pc, #156]	@ (80021a8 <TIM_Base_SetConfig+0x144>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d003      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a26      	ldr	r2, [pc, #152]	@ (80021ac <TIM_Base_SetConfig+0x148>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d108      	bne.n	8002128 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800211c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a0e      	ldr	r2, [pc, #56]	@ (8002184 <TIM_Base_SetConfig+0x120>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d003      	beq.n	8002156 <TIM_Base_SetConfig+0xf2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a10      	ldr	r2, [pc, #64]	@ (8002194 <TIM_Base_SetConfig+0x130>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d103      	bne.n	800215e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f043 0204 	orr.w	r2, r3, #4
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	601a      	str	r2, [r3, #0]
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40010000 	.word	0x40010000
 8002188:	40000400 	.word	0x40000400
 800218c:	40000800 	.word	0x40000800
 8002190:	40000c00 	.word	0x40000c00
 8002194:	40010400 	.word	0x40010400
 8002198:	40014000 	.word	0x40014000
 800219c:	40014400 	.word	0x40014400
 80021a0:	40014800 	.word	0x40014800
 80021a4:	40001800 	.word	0x40001800
 80021a8:	40001c00 	.word	0x40001c00
 80021ac:	40002000 	.word	0x40002000

080021b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f023 0201 	bic.w	r2, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0303 	bic.w	r3, r3, #3
 80021e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f023 0302 	bic.w	r3, r3, #2
 80021f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a20      	ldr	r2, [pc, #128]	@ (8002288 <TIM_OC1_SetConfig+0xd8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d003      	beq.n	8002214 <TIM_OC1_SetConfig+0x64>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a1f      	ldr	r2, [pc, #124]	@ (800228c <TIM_OC1_SetConfig+0xdc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d10c      	bne.n	800222e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f023 0308 	bic.w	r3, r3, #8
 800221a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f023 0304 	bic.w	r3, r3, #4
 800222c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a15      	ldr	r2, [pc, #84]	@ (8002288 <TIM_OC1_SetConfig+0xd8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d003      	beq.n	800223e <TIM_OC1_SetConfig+0x8e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a14      	ldr	r2, [pc, #80]	@ (800228c <TIM_OC1_SetConfig+0xdc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d111      	bne.n	8002262 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800224c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	621a      	str	r2, [r3, #32]
}
 800227c:	bf00      	nop
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40010000 	.word	0x40010000
 800228c:	40010400 	.word	0x40010400

08002290 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f023 0210 	bic.w	r2, r3, #16
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f023 0320 	bic.w	r3, r3, #32
 80022da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <TIM_OC2_SetConfig+0xe4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <TIM_OC2_SetConfig+0x68>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a21      	ldr	r2, [pc, #132]	@ (8002378 <TIM_OC2_SetConfig+0xe8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d10d      	bne.n	8002314 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002312:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a17      	ldr	r2, [pc, #92]	@ (8002374 <TIM_OC2_SetConfig+0xe4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d003      	beq.n	8002324 <TIM_OC2_SetConfig+0x94>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a16      	ldr	r2, [pc, #88]	@ (8002378 <TIM_OC2_SetConfig+0xe8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d113      	bne.n	800234c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800232a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002332:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	621a      	str	r2, [r3, #32]
}
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40010000 	.word	0x40010000
 8002378:	40010400 	.word	0x40010400

0800237c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80023c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a21      	ldr	r2, [pc, #132]	@ (800245c <TIM_OC3_SetConfig+0xe0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <TIM_OC3_SetConfig+0x66>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a20      	ldr	r2, [pc, #128]	@ (8002460 <TIM_OC3_SetConfig+0xe4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d10d      	bne.n	80023fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a16      	ldr	r2, [pc, #88]	@ (800245c <TIM_OC3_SetConfig+0xe0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d003      	beq.n	800240e <TIM_OC3_SetConfig+0x92>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a15      	ldr	r2, [pc, #84]	@ (8002460 <TIM_OC3_SetConfig+0xe4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d113      	bne.n	8002436 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800241c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	621a      	str	r2, [r3, #32]
}
 8002450:	bf00      	nop
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40010000 	.word	0x40010000
 8002460:	40010400 	.word	0x40010400

08002464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800249a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	031b      	lsls	r3, r3, #12
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <TIM_OC4_SetConfig+0xa4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d003      	beq.n	80024cc <TIM_OC4_SetConfig+0x68>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a11      	ldr	r2, [pc, #68]	@ (800250c <TIM_OC4_SetConfig+0xa8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d109      	bne.n	80024e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	019b      	lsls	r3, r3, #6
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	621a      	str	r2, [r3, #32]
}
 80024fa:	bf00      	nop
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <turn_on>:
#include "output.h"

typedef struct _Output Output;

static void turn_on(Output* this)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->gpio_config.GPIOx, this->gpio_config.GPIO_Pin, GPIO_PIN_SET);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	889b      	ldrh	r3, [r3, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	4619      	mov	r1, r3
 800254c:	f7fe fe06 	bl	800115c <HAL_GPIO_WritePin>
	this->state = true;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	721a      	strb	r2, [r3, #8]
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <turn_off>:

static void turn_off(Output* this)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->gpio_config.GPIOx, this->gpio_config.GPIO_Pin, GPIO_PIN_RESET);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	889b      	ldrh	r3, [r3, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fdf3 	bl	800115c <HAL_GPIO_WritePin>
	this->state = false;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	721a      	strb	r2, [r3, #8]
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <toggle>:

static void toggle(Output* this)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	this->state ? this->turn_off(this) : this->turn_on(this);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7a1b      	ldrb	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <toggle+0x1a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
}
 800259c:	e003      	b.n	80025a6 <toggle+0x22>
	this->state ? this->turn_off(this) : this->turn_on(this);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <is_on>:

static bool is_on(Output* this)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
	return this->state;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	7a1b      	ldrb	r3, [r3, #8]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <new_Output>:

Output* new_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
	Output* this = malloc(sizeof(Output));
 80025d4:	201c      	movs	r0, #28
 80025d6:	f002 fdef 	bl	80051b8 <malloc>
 80025da:	4603      	mov	r3, r0
 80025dc:	60fb      	str	r3, [r7, #12]
	if (!this) return NULL;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <new_Output+0x20>
 80025e4:	2300      	movs	r3, #0
 80025e6:	e019      	b.n	800261c <new_Output+0x54>

	this->gpio_config.GPIOx = GPIOx;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	601a      	str	r2, [r3, #0]
	this->gpio_config.GPIO_Pin = GPIO_Pin;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	887a      	ldrh	r2, [r7, #2]
 80025f2:	809a      	strh	r2, [r3, #4]
	this->state = false;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	721a      	strb	r2, [r3, #8]

	this->turn_on  = turn_on;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a09      	ldr	r2, [pc, #36]	@ (8002624 <new_Output+0x5c>)
 80025fe:	60da      	str	r2, [r3, #12]
	this->turn_off = turn_off;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a09      	ldr	r2, [pc, #36]	@ (8002628 <new_Output+0x60>)
 8002604:	611a      	str	r2, [r3, #16]
	this->toggle   = toggle;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4a08      	ldr	r2, [pc, #32]	@ (800262c <new_Output+0x64>)
 800260a:	615a      	str	r2, [r3, #20]
	this->is_on    = is_on;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4a08      	ldr	r2, [pc, #32]	@ (8002630 <new_Output+0x68>)
 8002610:	619a      	str	r2, [r3, #24]

	this->turn_off(this);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	4798      	blx	r3

	return this;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	08002539 	.word	0x08002539
 8002628:	0800255f 	.word	0x0800255f
 800262c:	08002585 	.word	0x08002585
 8002630:	080025af 	.word	0x080025af

08002634 <__NVIC_SetPriority>:
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	@ (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	@ (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <SysTick_Handler+0x1c>)
 800268e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002690:	f001 fd18 	bl	80040c4 <xTaskGetSchedulerState>
 8002694:	4603      	mov	r3, r0
 8002696:	2b01      	cmp	r3, #1
 8002698:	d001      	beq.n	800269e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800269a:	f002 fb0d 	bl	8004cb8 <xPortSysTickHandler>
  }
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026ac:	2100      	movs	r1, #0
 80026ae:	f06f 0004 	mvn.w	r0, #4
 80026b2:	f7ff ffbf 	bl	8002634 <__NVIC_SetPriority>
#endif
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026c2:	f3ef 8305 	mrs	r3, IPSR
 80026c6:	603b      	str	r3, [r7, #0]
  return(result);
 80026c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80026ce:	f06f 0305 	mvn.w	r3, #5
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	e00c      	b.n	80026f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80026d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <osKernelInitialize+0x44>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d105      	bne.n	80026ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80026de:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <osKernelInitialize+0x44>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	e002      	b.n	80026f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026f0:	687b      	ldr	r3, [r7, #4]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000118 	.word	0x20000118

08002704 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800270a:	f3ef 8305 	mrs	r3, IPSR
 800270e:	603b      	str	r3, [r7, #0]
  return(result);
 8002710:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002716:	f06f 0305 	mvn.w	r3, #5
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	e010      	b.n	8002740 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <osKernelStart+0x48>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d109      	bne.n	800273a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002726:	f7ff ffbf 	bl	80026a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <osKernelStart+0x48>)
 800272c:	2202      	movs	r2, #2
 800272e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002730:	f001 f87a 	bl	8003828 <vTaskStartScheduler>
      stat = osOK;
 8002734:	2300      	movs	r3, #0
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	e002      	b.n	8002740 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002740:	687b      	ldr	r3, [r7, #4]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000118 	.word	0x20000118

08002750 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b08e      	sub	sp, #56	@ 0x38
 8002754:	af04      	add	r7, sp, #16
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002760:	f3ef 8305 	mrs	r3, IPSR
 8002764:	617b      	str	r3, [r7, #20]
  return(result);
 8002766:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002768:	2b00      	cmp	r3, #0
 800276a:	d17e      	bne.n	800286a <osThreadNew+0x11a>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d07b      	beq.n	800286a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002772:	2380      	movs	r3, #128	@ 0x80
 8002774:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002776:	2318      	movs	r3, #24
 8002778:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d045      	beq.n	8002816 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <osThreadNew+0x48>
        name = attr->name;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <osThreadNew+0x6e>
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b38      	cmp	r3, #56	@ 0x38
 80027b0:	d805      	bhi.n	80027be <osThreadNew+0x6e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <osThreadNew+0x72>
        return (NULL);
 80027be:	2300      	movs	r3, #0
 80027c0:	e054      	b.n	800286c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00e      	beq.n	80027f8 <osThreadNew+0xa8>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b5b      	cmp	r3, #91	@ 0x5b
 80027e0:	d90a      	bls.n	80027f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <osThreadNew+0xa8>
        mem = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e010      	b.n	800281a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10c      	bne.n	800281a <osThreadNew+0xca>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d108      	bne.n	800281a <osThreadNew+0xca>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <osThreadNew+0xca>
          mem = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	e001      	b.n	800281a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d110      	bne.n	8002842 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002828:	9202      	str	r2, [sp, #8]
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6a3a      	ldr	r2, [r7, #32]
 8002834:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fe1a 	bl	8003470 <xTaskCreateStatic>
 800283c:	4603      	mov	r3, r0
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e013      	b.n	800286a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d110      	bne.n	800286a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	b29a      	uxth	r2, r3
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fe68 	bl	8003530 <xTaskCreate>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d001      	beq.n	800286a <osThreadNew+0x11a>
            hTask = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800286a:	693b      	ldr	r3, [r7, #16]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3728      	adds	r7, #40	@ 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800287c:	f3ef 8305 	mrs	r3, IPSR
 8002880:	60bb      	str	r3, [r7, #8]
  return(result);
 8002882:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <osDelay+0x1c>
    stat = osErrorISR;
 8002888:	f06f 0305 	mvn.w	r3, #5
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e007      	b.n	80028a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 ff8e 	bl	80037bc <vTaskDelay>
    }
  }

  return (stat);
 80028a0:	68fb      	ldr	r3, [r7, #12]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a07      	ldr	r2, [pc, #28]	@ (80028d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80028bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4a06      	ldr	r2, [pc, #24]	@ (80028dc <vApplicationGetIdleTaskMemory+0x30>)
 80028c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2280      	movs	r2, #128	@ 0x80
 80028c8:	601a      	str	r2, [r3, #0]
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	2000011c 	.word	0x2000011c
 80028dc:	20000178 	.word	0x20000178

080028e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a07      	ldr	r2, [pc, #28]	@ (800290c <vApplicationGetTimerTaskMemory+0x2c>)
 80028f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4a06      	ldr	r2, [pc, #24]	@ (8002910 <vApplicationGetTimerTaskMemory+0x30>)
 80028f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028fe:	601a      	str	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	20000378 	.word	0x20000378
 8002910:	200003d4 	.word	0x200003d4

08002914 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f103 0208 	add.w	r2, r3, #8
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f04f 32ff 	mov.w	r2, #4294967295
 800292c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f103 0208 	add.w	r2, r3, #8
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f103 0208 	add.w	r2, r3, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	601a      	str	r2, [r3, #0]
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d103      	bne.n	80029d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	e00c      	b.n	80029f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3308      	adds	r3, #8
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e002      	b.n	80029e4 <vListInsert+0x2e>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d2f6      	bcs.n	80029de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	601a      	str	r2, [r3, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6892      	ldr	r2, [r2, #8]
 8002a3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6852      	ldr	r2, [r2, #4]
 8002a48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d103      	bne.n	8002a5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	1e5a      	subs	r2, r3, #1
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002aa8:	f002 f876 	bl	8004b98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab4:	68f9      	ldr	r1, [r7, #12]
 8002ab6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	441a      	add	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	68f9      	ldr	r1, [r7, #12]
 8002adc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	441a      	add	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	22ff      	movs	r2, #255	@ 0xff
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	22ff      	movs	r2, #255	@ 0xff
 8002af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d114      	bne.n	8002b28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d01a      	beq.n	8002b3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3310      	adds	r3, #16
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 f91a 	bl	8003d44 <xTaskRemoveFromEventList>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d012      	beq.n	8002b3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b16:	4b0d      	ldr	r3, [pc, #52]	@ (8002b4c <xQueueGenericReset+0xd0>)
 8002b18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	e009      	b.n	8002b3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3310      	adds	r3, #16
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fef1 	bl	8002914 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	3324      	adds	r3, #36	@ 0x24
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff feec 	bl	8002914 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b3c:	f002 f85e 	bl	8004bfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b40:	2301      	movs	r3, #1
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	e000ed04 	.word	0xe000ed04

08002b50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08e      	sub	sp, #56	@ 0x38
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10b      	bne.n	8002b7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b76:	bf00      	nop
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10b      	bne.n	8002b9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	e7fd      	b.n	8002b96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <xQueueGenericCreateStatic+0x56>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <xQueueGenericCreateStatic+0x5a>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <xQueueGenericCreateStatic+0x5c>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10b      	bne.n	8002bc8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	623b      	str	r3, [r7, #32]
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <xQueueGenericCreateStatic+0x84>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <xQueueGenericCreateStatic+0x88>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <xQueueGenericCreateStatic+0x8a>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10b      	bne.n	8002bf6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	61fb      	str	r3, [r7, #28]
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	e7fd      	b.n	8002bf2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bf6:	2350      	movs	r3, #80	@ 0x50
 8002bf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b50      	cmp	r3, #80	@ 0x50
 8002bfe:	d00b      	beq.n	8002c18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	61bb      	str	r3, [r7, #24]
}
 8002c12:	bf00      	nop
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f805 	bl	8002c4a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3730      	adds	r7, #48	@ 0x30
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e002      	b.n	8002c6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c78:	2101      	movs	r1, #1
 8002c7a:	69b8      	ldr	r0, [r7, #24]
 8002c7c:	f7ff fefe 	bl	8002a7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08e      	sub	sp, #56	@ 0x38
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10b      	bne.n	8002cc4 <xQueueGenericSend+0x34>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cbe:	bf00      	nop
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <xQueueGenericSend+0x42>
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <xQueueGenericSend+0x46>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <xQueueGenericSend+0x48>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10b      	bne.n	8002cf4 <xQueueGenericSend+0x64>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cee:	bf00      	nop
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d103      	bne.n	8002d02 <xQueueGenericSend+0x72>
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <xQueueGenericSend+0x76>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <xQueueGenericSend+0x78>
 8002d06:	2300      	movs	r3, #0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10b      	bne.n	8002d24 <xQueueGenericSend+0x94>
	__asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	623b      	str	r3, [r7, #32]
}
 8002d1e:	bf00      	nop
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d24:	f001 f9ce 	bl	80040c4 <xTaskGetSchedulerState>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <xQueueGenericSend+0xa4>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <xQueueGenericSend+0xa8>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <xQueueGenericSend+0xaa>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10b      	bne.n	8002d56 <xQueueGenericSend+0xc6>
	__asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	61fb      	str	r3, [r7, #28]
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	e7fd      	b.n	8002d52 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d56:	f001 ff1f 	bl	8004b98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <xQueueGenericSend+0xdc>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d129      	bne.n	8002dc0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d72:	f000 fa0f 	bl	8003194 <prvCopyDataToQueue>
 8002d76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d010      	beq.n	8002da2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d82:	3324      	adds	r3, #36	@ 0x24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 ffdd 	bl	8003d44 <xTaskRemoveFromEventList>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d90:	4b3f      	ldr	r3, [pc, #252]	@ (8002e90 <xQueueGenericSend+0x200>)
 8002d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	e00a      	b.n	8002db8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002da8:	4b39      	ldr	r3, [pc, #228]	@ (8002e90 <xQueueGenericSend+0x200>)
 8002daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002db8:	f001 ff20 	bl	8004bfc <vPortExitCritical>
				return pdPASS;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e063      	b.n	8002e88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dc6:	f001 ff19 	bl	8004bfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e05c      	b.n	8002e88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 f817 	bl	8003e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dde:	2301      	movs	r3, #1
 8002de0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002de2:	f001 ff0b 	bl	8004bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002de6:	f000 fd87 	bl	80038f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dea:	f001 fed5 	bl	8004b98 <vPortEnterCritical>
 8002dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002df4:	b25b      	sxtb	r3, r3
 8002df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfa:	d103      	bne.n	8002e04 <xQueueGenericSend+0x174>
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e0a:	b25b      	sxtb	r3, r3
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d103      	bne.n	8002e1a <xQueueGenericSend+0x18a>
 8002e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e1a:	f001 feef 	bl	8004bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e1e:	1d3a      	adds	r2, r7, #4
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 f806 	bl	8003e38 <xTaskCheckForTimeOut>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d124      	bne.n	8002e7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e34:	f000 faa6 	bl	8003384 <prvIsQueueFull>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d018      	beq.n	8002e70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e40:	3310      	adds	r3, #16
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 ff2a 	bl	8003ca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e4e:	f000 fa31 	bl	80032b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e52:	f000 fd5f 	bl	8003914 <xTaskResumeAll>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f47f af7c 	bne.w	8002d56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e90 <xQueueGenericSend+0x200>)
 8002e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	e772      	b.n	8002d56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e72:	f000 fa1f 	bl	80032b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e76:	f000 fd4d 	bl	8003914 <xTaskResumeAll>
 8002e7a:	e76c      	b.n	8002d56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e7e:	f000 fa19 	bl	80032b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e82:	f000 fd47 	bl	8003914 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3738      	adds	r7, #56	@ 0x38
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	e000ed04 	.word	0xe000ed04

08002e94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b090      	sub	sp, #64	@ 0x40
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ebe:	bf00      	nop
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <xQueueGenericSendFromISR+0x3e>
 8002eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <xQueueGenericSendFromISR+0x42>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <xQueueGenericSendFromISR+0x44>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	e7fd      	b.n	8002ef0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d103      	bne.n	8002f02 <xQueueGenericSendFromISR+0x6e>
 8002efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <xQueueGenericSendFromISR+0x72>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <xQueueGenericSendFromISR+0x74>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10b      	bne.n	8002f24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	623b      	str	r3, [r7, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f24:	f001 ff18 	bl	8004d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f28:	f3ef 8211 	mrs	r2, BASEPRI
 8002f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	61fa      	str	r2, [r7, #28]
 8002f3e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f40:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f42:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d302      	bcc.n	8002f56 <xQueueGenericSendFromISR+0xc2>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d12f      	bne.n	8002fb6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002f6c:	f000 f912 	bl	8003194 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f70:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d112      	bne.n	8002fa0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f84:	3324      	adds	r3, #36	@ 0x24
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fedc 	bl	8003d44 <xTaskRemoveFromEventList>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00e      	beq.n	8002fb0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e007      	b.n	8002fb0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	b25a      	sxtb	r2, r3
 8002faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002fb4:	e001      	b.n	8002fba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fbc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3740      	adds	r7, #64	@ 0x40
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08c      	sub	sp, #48	@ 0x30
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <xQueueReceive+0x32>
	__asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	623b      	str	r3, [r7, #32]
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	e7fd      	b.n	8002ffe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <xQueueReceive+0x40>
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <xQueueReceive+0x44>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <xQueueReceive+0x46>
 8003014:	2300      	movs	r3, #0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <xQueueReceive+0x62>
	__asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	61fb      	str	r3, [r7, #28]
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	e7fd      	b.n	800302e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003032:	f001 f847 	bl	80040c4 <xTaskGetSchedulerState>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <xQueueReceive+0x72>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <xQueueReceive+0x76>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <xQueueReceive+0x78>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <xQueueReceive+0x94>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	61bb      	str	r3, [r7, #24]
}
 800305e:	bf00      	nop
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003064:	f001 fd98 	bl	8004b98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01f      	beq.n	80030b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003078:	f000 f8f6 	bl	8003268 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	1e5a      	subs	r2, r3, #1
 8003080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003082:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00f      	beq.n	80030ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800308c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308e:	3310      	adds	r3, #16
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fe57 	bl	8003d44 <xTaskRemoveFromEventList>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800309c:	4b3c      	ldr	r3, [pc, #240]	@ (8003190 <xQueueReceive+0x1c0>)
 800309e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030ac:	f001 fda6 	bl	8004bfc <vPortExitCritical>
				return pdPASS;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e069      	b.n	8003188 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ba:	f001 fd9f 	bl	8004bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030be:	2300      	movs	r3, #0
 80030c0:	e062      	b.n	8003188 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d106      	bne.n	80030d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fe9d 	bl	8003e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030d2:	2301      	movs	r3, #1
 80030d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030d6:	f001 fd91 	bl	8004bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030da:	f000 fc0d 	bl	80038f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030de:	f001 fd5b 	bl	8004b98 <vPortEnterCritical>
 80030e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030e8:	b25b      	sxtb	r3, r3
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ee:	d103      	bne.n	80030f8 <xQueueReceive+0x128>
 80030f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030fe:	b25b      	sxtb	r3, r3
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d103      	bne.n	800310e <xQueueReceive+0x13e>
 8003106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800310e:	f001 fd75 	bl	8004bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003112:	1d3a      	adds	r2, r7, #4
 8003114:	f107 0310 	add.w	r3, r7, #16
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fe8c 	bl	8003e38 <xTaskCheckForTimeOut>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d123      	bne.n	800316e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003128:	f000 f916 	bl	8003358 <prvIsQueueEmpty>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d017      	beq.n	8003162 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003134:	3324      	adds	r3, #36	@ 0x24
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fdb0 	bl	8003ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003140:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003142:	f000 f8b7 	bl	80032b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003146:	f000 fbe5 	bl	8003914 <xTaskResumeAll>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d189      	bne.n	8003064 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003150:	4b0f      	ldr	r3, [pc, #60]	@ (8003190 <xQueueReceive+0x1c0>)
 8003152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	e780      	b.n	8003064 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003164:	f000 f8a6 	bl	80032b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003168:	f000 fbd4 	bl	8003914 <xTaskResumeAll>
 800316c:	e77a      	b.n	8003064 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800316e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003170:	f000 f8a0 	bl	80032b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003174:	f000 fbce 	bl	8003914 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003178:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800317a:	f000 f8ed 	bl	8003358 <prvIsQueueEmpty>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	f43f af6f 	beq.w	8003064 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003186:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003188:	4618      	mov	r0, r3
 800318a:	3730      	adds	r7, #48	@ 0x30
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	e000ed04 	.word	0xe000ed04

08003194 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10d      	bne.n	80031ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d14d      	bne.n	8003256 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 ff9e 	bl	8004100 <xTaskPriorityDisinherit>
 80031c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	e043      	b.n	8003256 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d119      	bne.n	8003208 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6858      	ldr	r0, [r3, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	461a      	mov	r2, r3
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	f002 f8e4 	bl	80053ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	441a      	add	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d32b      	bcc.n	8003256 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	e026      	b.n	8003256 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68d8      	ldr	r0, [r3, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	461a      	mov	r2, r3
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	f002 f8ca 	bl	80053ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	425b      	negs	r3, r3
 8003222:	441a      	add	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d207      	bcs.n	8003244 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	425b      	negs	r3, r3
 800323e:	441a      	add	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d105      	bne.n	8003256 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	3b01      	subs	r3, #1
 8003254:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800325e:	697b      	ldr	r3, [r7, #20]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d018      	beq.n	80032ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	441a      	add	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	429a      	cmp	r2, r3
 8003292:	d303      	bcc.n	800329c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68d9      	ldr	r1, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	461a      	mov	r2, r3
 80032a6:	6838      	ldr	r0, [r7, #0]
 80032a8:	f002 f880 	bl	80053ac <memcpy>
	}
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032bc:	f001 fc6c 	bl	8004b98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032c8:	e011      	b.n	80032ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d012      	beq.n	80032f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3324      	adds	r3, #36	@ 0x24
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fd34 	bl	8003d44 <xTaskRemoveFromEventList>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032e2:	f000 fe0d 	bl	8003f00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	dce9      	bgt.n	80032ca <prvUnlockQueue+0x16>
 80032f6:	e000      	b.n	80032fa <prvUnlockQueue+0x46>
					break;
 80032f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	22ff      	movs	r2, #255	@ 0xff
 80032fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003302:	f001 fc7b 	bl	8004bfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003306:	f001 fc47 	bl	8004b98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003310:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003312:	e011      	b.n	8003338 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d012      	beq.n	8003342 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3310      	adds	r3, #16
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fd0f 	bl	8003d44 <xTaskRemoveFromEventList>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800332c:	f000 fde8 	bl	8003f00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003330:	7bbb      	ldrb	r3, [r7, #14]
 8003332:	3b01      	subs	r3, #1
 8003334:	b2db      	uxtb	r3, r3
 8003336:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800333c:	2b00      	cmp	r3, #0
 800333e:	dce9      	bgt.n	8003314 <prvUnlockQueue+0x60>
 8003340:	e000      	b.n	8003344 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003342:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	22ff      	movs	r2, #255	@ 0xff
 8003348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800334c:	f001 fc56 	bl	8004bfc <vPortExitCritical>
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003360:	f001 fc1a 	bl	8004b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800336c:	2301      	movs	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e001      	b.n	8003376 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003376:	f001 fc41 	bl	8004bfc <vPortExitCritical>

	return xReturn;
 800337a:	68fb      	ldr	r3, [r7, #12]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800338c:	f001 fc04 	bl	8004b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003398:	429a      	cmp	r2, r3
 800339a:	d102      	bne.n	80033a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800339c:	2301      	movs	r3, #1
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e001      	b.n	80033a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033a6:	f001 fc29 	bl	8004bfc <vPortExitCritical>

	return xReturn;
 80033aa:	68fb      	ldr	r3, [r7, #12]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e014      	b.n	80033ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003404 <vQueueAddToRegistry+0x50>)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033d0:	490c      	ldr	r1, [pc, #48]	@ (8003404 <vQueueAddToRegistry+0x50>)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033da:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <vQueueAddToRegistry+0x50>)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033e6:	e006      	b.n	80033f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3301      	adds	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b07      	cmp	r3, #7
 80033f2:	d9e7      	bls.n	80033c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	200007d4 	.word	0x200007d4

08003408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003418:	f001 fbbe 	bl	8004b98 <vPortEnterCritical>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003422:	b25b      	sxtb	r3, r3
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d103      	bne.n	8003432 <vQueueWaitForMessageRestricted+0x2a>
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003438:	b25b      	sxtb	r3, r3
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d103      	bne.n	8003448 <vQueueWaitForMessageRestricted+0x40>
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003448:	f001 fbd8 	bl	8004bfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003450:	2b00      	cmp	r3, #0
 8003452:	d106      	bne.n	8003462 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	3324      	adds	r3, #36	@ 0x24
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fc45 	bl	8003cec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003462:	6978      	ldr	r0, [r7, #20]
 8003464:	f7ff ff26 	bl	80032b4 <prvUnlockQueue>
	}
 8003468:	bf00      	nop
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08e      	sub	sp, #56	@ 0x38
 8003474:	af04      	add	r7, sp, #16
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800347e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10b      	bne.n	800349c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	623b      	str	r3, [r7, #32]
}
 8003496:	bf00      	nop
 8003498:	bf00      	nop
 800349a:	e7fd      	b.n	8003498 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800349c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	61fb      	str	r3, [r7, #28]
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	e7fd      	b.n	80034b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034ba:	235c      	movs	r3, #92	@ 0x5c
 80034bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80034c2:	d00b      	beq.n	80034dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	61bb      	str	r3, [r7, #24]
}
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	e7fd      	b.n	80034d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01e      	beq.n	8003522 <xTaskCreateStatic+0xb2>
 80034e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d01b      	beq.n	8003522 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034fc:	2300      	movs	r3, #0
 80034fe:	9303      	str	r3, [sp, #12]
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	9302      	str	r3, [sp, #8]
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f850 	bl	80035ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800351a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800351c:	f000 f8de 	bl	80036dc <prvAddNewTaskToReadyList>
 8003520:	e001      	b.n	8003526 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003526:	697b      	ldr	r3, [r7, #20]
	}
 8003528:	4618      	mov	r0, r3
 800352a:	3728      	adds	r7, #40	@ 0x28
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08c      	sub	sp, #48	@ 0x30
 8003534:	af04      	add	r7, sp, #16
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4618      	mov	r0, r3
 8003546:	f001 fc49 	bl	8004ddc <pvPortMalloc>
 800354a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00e      	beq.n	8003570 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003552:	205c      	movs	r0, #92	@ 0x5c
 8003554:	f001 fc42 	bl	8004ddc <pvPortMalloc>
 8003558:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	631a      	str	r2, [r3, #48]	@ 0x30
 8003566:	e005      	b.n	8003574 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003568:	6978      	ldr	r0, [r7, #20]
 800356a:	f001 fd05 	bl	8004f78 <vPortFree>
 800356e:	e001      	b.n	8003574 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d017      	beq.n	80035aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003582:	88fa      	ldrh	r2, [r7, #6]
 8003584:	2300      	movs	r3, #0
 8003586:	9303      	str	r3, [sp, #12]
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	9302      	str	r3, [sp, #8]
 800358c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f80e 	bl	80035ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800359e:	69f8      	ldr	r0, [r7, #28]
 80035a0:	f000 f89c 	bl	80036dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035a4:	2301      	movs	r3, #1
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	e002      	b.n	80035b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035aa:	f04f 33ff 	mov.w	r3, #4294967295
 80035ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035b0:	69bb      	ldr	r3, [r7, #24]
	}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b088      	sub	sp, #32
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	461a      	mov	r2, r3
 80035d2:	21a5      	movs	r1, #165	@ 0xa5
 80035d4:	f001 fea6 	bl	8005324 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035e2:	3b01      	subs	r3, #1
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	f023 0307 	bic.w	r3, r3, #7
 80035f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	617b      	str	r3, [r7, #20]
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	e7fd      	b.n	8003610 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01f      	beq.n	800365a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	e012      	b.n	8003646 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	7819      	ldrb	r1, [r3, #0]
 8003628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	3334      	adds	r3, #52	@ 0x34
 8003630:	460a      	mov	r2, r1
 8003632:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d006      	beq.n	800364e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	3301      	adds	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	2b0f      	cmp	r3, #15
 800364a:	d9e9      	bls.n	8003620 <prvInitialiseNewTask+0x66>
 800364c:	e000      	b.n	8003650 <prvInitialiseNewTask+0x96>
			{
				break;
 800364e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003658:	e003      	b.n	8003662 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003664:	2b37      	cmp	r3, #55	@ 0x37
 8003666:	d901      	bls.n	800366c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003668:	2337      	movs	r3, #55	@ 0x37
 800366a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800366c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003670:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003676:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	2200      	movs	r2, #0
 800367c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800367e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003680:	3304      	adds	r3, #4
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff f966 	bl	8002954 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	3318      	adds	r3, #24
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff f961 	bl	8002954 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003696:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	2200      	movs	r2, #0
 80036ac:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	68f9      	ldr	r1, [r7, #12]
 80036ba:	69b8      	ldr	r0, [r7, #24]
 80036bc:	f001 f93e 	bl	800493c <pxPortInitialiseStack>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036d2:	bf00      	nop
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036e4:	f001 fa58 	bl	8004b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036e8:	4b2d      	ldr	r3, [pc, #180]	@ (80037a0 <prvAddNewTaskToReadyList+0xc4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3301      	adds	r3, #1
 80036ee:	4a2c      	ldr	r2, [pc, #176]	@ (80037a0 <prvAddNewTaskToReadyList+0xc4>)
 80036f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036f2:	4b2c      	ldr	r3, [pc, #176]	@ (80037a4 <prvAddNewTaskToReadyList+0xc8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036fa:	4a2a      	ldr	r2, [pc, #168]	@ (80037a4 <prvAddNewTaskToReadyList+0xc8>)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003700:	4b27      	ldr	r3, [pc, #156]	@ (80037a0 <prvAddNewTaskToReadyList+0xc4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d110      	bne.n	800372a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003708:	f000 fc1e 	bl	8003f48 <prvInitialiseTaskLists>
 800370c:	e00d      	b.n	800372a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800370e:	4b26      	ldr	r3, [pc, #152]	@ (80037a8 <prvAddNewTaskToReadyList+0xcc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003716:	4b23      	ldr	r3, [pc, #140]	@ (80037a4 <prvAddNewTaskToReadyList+0xc8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	429a      	cmp	r2, r3
 8003722:	d802      	bhi.n	800372a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003724:	4a1f      	ldr	r2, [pc, #124]	@ (80037a4 <prvAddNewTaskToReadyList+0xc8>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800372a:	4b20      	ldr	r3, [pc, #128]	@ (80037ac <prvAddNewTaskToReadyList+0xd0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3301      	adds	r3, #1
 8003730:	4a1e      	ldr	r2, [pc, #120]	@ (80037ac <prvAddNewTaskToReadyList+0xd0>)
 8003732:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003734:	4b1d      	ldr	r3, [pc, #116]	@ (80037ac <prvAddNewTaskToReadyList+0xd0>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003740:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <prvAddNewTaskToReadyList+0xd4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d903      	bls.n	8003750 <prvAddNewTaskToReadyList+0x74>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374c:	4a18      	ldr	r2, [pc, #96]	@ (80037b0 <prvAddNewTaskToReadyList+0xd4>)
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4a15      	ldr	r2, [pc, #84]	@ (80037b4 <prvAddNewTaskToReadyList+0xd8>)
 800375e:	441a      	add	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f7ff f901 	bl	800296e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800376c:	f001 fa46 	bl	8004bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003770:	4b0d      	ldr	r3, [pc, #52]	@ (80037a8 <prvAddNewTaskToReadyList+0xcc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00e      	beq.n	8003796 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003778:	4b0a      	ldr	r3, [pc, #40]	@ (80037a4 <prvAddNewTaskToReadyList+0xc8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	429a      	cmp	r2, r3
 8003784:	d207      	bcs.n	8003796 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003786:	4b0c      	ldr	r3, [pc, #48]	@ (80037b8 <prvAddNewTaskToReadyList+0xdc>)
 8003788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000ce8 	.word	0x20000ce8
 80037a4:	20000814 	.word	0x20000814
 80037a8:	20000cf4 	.word	0x20000cf4
 80037ac:	20000d04 	.word	0x20000d04
 80037b0:	20000cf0 	.word	0x20000cf0
 80037b4:	20000818 	.word	0x20000818
 80037b8:	e000ed04 	.word	0xe000ed04

080037bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037ce:	4b14      	ldr	r3, [pc, #80]	@ (8003820 <vTaskDelay+0x64>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <vTaskDelay+0x32>
	__asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	60bb      	str	r3, [r7, #8]
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	e7fd      	b.n	80037ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037ee:	f000 f883 	bl	80038f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037f2:	2100      	movs	r1, #0
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fcf3 	bl	80041e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037fa:	f000 f88b 	bl	8003914 <xTaskResumeAll>
 80037fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d107      	bne.n	8003816 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003806:	4b07      	ldr	r3, [pc, #28]	@ (8003824 <vTaskDelay+0x68>)
 8003808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000d10 	.word	0x20000d10
 8003824:	e000ed04 	.word	0xe000ed04

08003828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	@ 0x28
 800382c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003832:	2300      	movs	r3, #0
 8003834:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003836:	463a      	mov	r2, r7
 8003838:	1d39      	adds	r1, r7, #4
 800383a:	f107 0308 	add.w	r3, r7, #8
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff f834 	bl	80028ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003844:	6839      	ldr	r1, [r7, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	9202      	str	r2, [sp, #8]
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	2300      	movs	r3, #0
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2300      	movs	r3, #0
 8003854:	460a      	mov	r2, r1
 8003856:	4922      	ldr	r1, [pc, #136]	@ (80038e0 <vTaskStartScheduler+0xb8>)
 8003858:	4822      	ldr	r0, [pc, #136]	@ (80038e4 <vTaskStartScheduler+0xbc>)
 800385a:	f7ff fe09 	bl	8003470 <xTaskCreateStatic>
 800385e:	4603      	mov	r3, r0
 8003860:	4a21      	ldr	r2, [pc, #132]	@ (80038e8 <vTaskStartScheduler+0xc0>)
 8003862:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003864:	4b20      	ldr	r3, [pc, #128]	@ (80038e8 <vTaskStartScheduler+0xc0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800386c:	2301      	movs	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	e001      	b.n	8003876 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d102      	bne.n	8003882 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800387c:	f000 fd04 	bl	8004288 <xTimerCreateTimerTask>
 8003880:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d116      	bne.n	80038b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	613b      	str	r3, [r7, #16]
}
 800389a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800389c:	4b13      	ldr	r3, [pc, #76]	@ (80038ec <vTaskStartScheduler+0xc4>)
 800389e:	f04f 32ff 	mov.w	r2, #4294967295
 80038a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038a4:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <vTaskStartScheduler+0xc8>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038aa:	4b12      	ldr	r3, [pc, #72]	@ (80038f4 <vTaskStartScheduler+0xcc>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038b0:	f001 f8ce 	bl	8004a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038b4:	e00f      	b.n	80038d6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d10b      	bne.n	80038d6 <vTaskStartScheduler+0xae>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60fb      	str	r3, [r7, #12]
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	e7fd      	b.n	80038d2 <vTaskStartScheduler+0xaa>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	080053ec 	.word	0x080053ec
 80038e4:	08003f19 	.word	0x08003f19
 80038e8:	20000d0c 	.word	0x20000d0c
 80038ec:	20000d08 	.word	0x20000d08
 80038f0:	20000cf4 	.word	0x20000cf4
 80038f4:	20000cec 	.word	0x20000cec

080038f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038fc:	4b04      	ldr	r3, [pc, #16]	@ (8003910 <vTaskSuspendAll+0x18>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	4a03      	ldr	r2, [pc, #12]	@ (8003910 <vTaskSuspendAll+0x18>)
 8003904:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	20000d10 	.word	0x20000d10

08003914 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003922:	4b42      	ldr	r3, [pc, #264]	@ (8003a2c <xTaskResumeAll+0x118>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <xTaskResumeAll+0x2e>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	603b      	str	r3, [r7, #0]
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	e7fd      	b.n	800393e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003942:	f001 f929 	bl	8004b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003946:	4b39      	ldr	r3, [pc, #228]	@ (8003a2c <xTaskResumeAll+0x118>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3b01      	subs	r3, #1
 800394c:	4a37      	ldr	r2, [pc, #220]	@ (8003a2c <xTaskResumeAll+0x118>)
 800394e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003950:	4b36      	ldr	r3, [pc, #216]	@ (8003a2c <xTaskResumeAll+0x118>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d162      	bne.n	8003a1e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003958:	4b35      	ldr	r3, [pc, #212]	@ (8003a30 <xTaskResumeAll+0x11c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d05e      	beq.n	8003a1e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003960:	e02f      	b.n	80039c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003962:	4b34      	ldr	r3, [pc, #208]	@ (8003a34 <xTaskResumeAll+0x120>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3318      	adds	r3, #24
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff f85a 	bl	8002a28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3304      	adds	r3, #4
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff f855 	bl	8002a28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003982:	4b2d      	ldr	r3, [pc, #180]	@ (8003a38 <xTaskResumeAll+0x124>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d903      	bls.n	8003992 <xTaskResumeAll+0x7e>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	4a2a      	ldr	r2, [pc, #168]	@ (8003a38 <xTaskResumeAll+0x124>)
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4a27      	ldr	r2, [pc, #156]	@ (8003a3c <xTaskResumeAll+0x128>)
 80039a0:	441a      	add	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7fe ffe0 	bl	800296e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b2:	4b23      	ldr	r3, [pc, #140]	@ (8003a40 <xTaskResumeAll+0x12c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d302      	bcc.n	80039c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80039bc:	4b21      	ldr	r3, [pc, #132]	@ (8003a44 <xTaskResumeAll+0x130>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a34 <xTaskResumeAll+0x120>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1cb      	bne.n	8003962 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039d0:	f000 fb58 	bl	8004084 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a48 <xTaskResumeAll+0x134>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d010      	beq.n	8003a02 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039e0:	f000 f846 	bl	8003a70 <xTaskIncrementTick>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80039ea:	4b16      	ldr	r3, [pc, #88]	@ (8003a44 <xTaskResumeAll+0x130>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f1      	bne.n	80039e0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80039fc:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <xTaskResumeAll+0x134>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a02:	4b10      	ldr	r3, [pc, #64]	@ (8003a44 <xTaskResumeAll+0x130>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <xTaskResumeAll+0x138>)
 8003a10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a1e:	f001 f8ed 	bl	8004bfc <vPortExitCritical>

	return xAlreadyYielded;
 8003a22:	68bb      	ldr	r3, [r7, #8]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000d10 	.word	0x20000d10
 8003a30:	20000ce8 	.word	0x20000ce8
 8003a34:	20000ca8 	.word	0x20000ca8
 8003a38:	20000cf0 	.word	0x20000cf0
 8003a3c:	20000818 	.word	0x20000818
 8003a40:	20000814 	.word	0x20000814
 8003a44:	20000cfc 	.word	0x20000cfc
 8003a48:	20000cf8 	.word	0x20000cf8
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a56:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <xTaskGetTickCount+0x1c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a5c:	687b      	ldr	r3, [r7, #4]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000cec 	.word	0x20000cec

08003a70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb8 <xTaskIncrementTick+0x148>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f040 8090 	bne.w	8003ba4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a84:	4b4d      	ldr	r3, [pc, #308]	@ (8003bbc <xTaskIncrementTick+0x14c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8003bbc <xTaskIncrementTick+0x14c>)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d121      	bne.n	8003adc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a98:	4b49      	ldr	r3, [pc, #292]	@ (8003bc0 <xTaskIncrementTick+0x150>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <xTaskIncrementTick+0x4a>
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	603b      	str	r3, [r7, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	e7fd      	b.n	8003ab6 <xTaskIncrementTick+0x46>
 8003aba:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <xTaskIncrementTick+0x150>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	4b40      	ldr	r3, [pc, #256]	@ (8003bc4 <xTaskIncrementTick+0x154>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a3e      	ldr	r2, [pc, #248]	@ (8003bc0 <xTaskIncrementTick+0x150>)
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4a3e      	ldr	r2, [pc, #248]	@ (8003bc4 <xTaskIncrementTick+0x154>)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc8 <xTaskIncrementTick+0x158>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	4a3c      	ldr	r2, [pc, #240]	@ (8003bc8 <xTaskIncrementTick+0x158>)
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	f000 fad4 	bl	8004084 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003adc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bcc <xTaskIncrementTick+0x15c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d349      	bcc.n	8003b7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ae6:	4b36      	ldr	r3, [pc, #216]	@ (8003bc0 <xTaskIncrementTick+0x150>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d104      	bne.n	8003afa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af0:	4b36      	ldr	r3, [pc, #216]	@ (8003bcc <xTaskIncrementTick+0x15c>)
 8003af2:	f04f 32ff 	mov.w	r2, #4294967295
 8003af6:	601a      	str	r2, [r3, #0]
					break;
 8003af8:	e03f      	b.n	8003b7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003afa:	4b31      	ldr	r3, [pc, #196]	@ (8003bc0 <xTaskIncrementTick+0x150>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d203      	bcs.n	8003b1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b12:	4a2e      	ldr	r2, [pc, #184]	@ (8003bcc <xTaskIncrementTick+0x15c>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b18:	e02f      	b.n	8003b7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe ff82 	bl	8002a28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	3318      	adds	r3, #24
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe ff79 	bl	8002a28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b3a:	4b25      	ldr	r3, [pc, #148]	@ (8003bd0 <xTaskIncrementTick+0x160>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d903      	bls.n	8003b4a <xTaskIncrementTick+0xda>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b46:	4a22      	ldr	r2, [pc, #136]	@ (8003bd0 <xTaskIncrementTick+0x160>)
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd4 <xTaskIncrementTick+0x164>)
 8003b58:	441a      	add	r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f7fe ff04 	bl	800296e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd8 <xTaskIncrementTick+0x168>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d3b8      	bcc.n	8003ae6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b74:	2301      	movs	r3, #1
 8003b76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b78:	e7b5      	b.n	8003ae6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b7a:	4b17      	ldr	r3, [pc, #92]	@ (8003bd8 <xTaskIncrementTick+0x168>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b80:	4914      	ldr	r1, [pc, #80]	@ (8003bd4 <xTaskIncrementTick+0x164>)
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d901      	bls.n	8003b96 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003b92:	2301      	movs	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b96:	4b11      	ldr	r3, [pc, #68]	@ (8003bdc <xTaskIncrementTick+0x16c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	e004      	b.n	8003bae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8003be0 <xTaskIncrementTick+0x170>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	4a0d      	ldr	r2, [pc, #52]	@ (8003be0 <xTaskIncrementTick+0x170>)
 8003bac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003bae:	697b      	ldr	r3, [r7, #20]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000d10 	.word	0x20000d10
 8003bbc:	20000cec 	.word	0x20000cec
 8003bc0:	20000ca0 	.word	0x20000ca0
 8003bc4:	20000ca4 	.word	0x20000ca4
 8003bc8:	20000d00 	.word	0x20000d00
 8003bcc:	20000d08 	.word	0x20000d08
 8003bd0:	20000cf0 	.word	0x20000cf0
 8003bd4:	20000818 	.word	0x20000818
 8003bd8:	20000814 	.word	0x20000814
 8003bdc:	20000cfc 	.word	0x20000cfc
 8003be0:	20000cf8 	.word	0x20000cf8

08003be4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bea:	4b28      	ldr	r3, [pc, #160]	@ (8003c8c <vTaskSwitchContext+0xa8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bf2:	4b27      	ldr	r3, [pc, #156]	@ (8003c90 <vTaskSwitchContext+0xac>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bf8:	e042      	b.n	8003c80 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003bfa:	4b25      	ldr	r3, [pc, #148]	@ (8003c90 <vTaskSwitchContext+0xac>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c00:	4b24      	ldr	r3, [pc, #144]	@ (8003c94 <vTaskSwitchContext+0xb0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	e011      	b.n	8003c2c <vTaskSwitchContext+0x48>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <vTaskSwitchContext+0x42>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	607b      	str	r3, [r7, #4]
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	e7fd      	b.n	8003c22 <vTaskSwitchContext+0x3e>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	491a      	ldr	r1, [pc, #104]	@ (8003c98 <vTaskSwitchContext+0xb4>)
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0e3      	beq.n	8003c08 <vTaskSwitchContext+0x24>
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4a13      	ldr	r2, [pc, #76]	@ (8003c98 <vTaskSwitchContext+0xb4>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	3308      	adds	r3, #8
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d104      	bne.n	8003c70 <vTaskSwitchContext+0x8c>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	605a      	str	r2, [r3, #4]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4a09      	ldr	r2, [pc, #36]	@ (8003c9c <vTaskSwitchContext+0xb8>)
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	4a06      	ldr	r2, [pc, #24]	@ (8003c94 <vTaskSwitchContext+0xb0>)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6013      	str	r3, [r2, #0]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	20000d10 	.word	0x20000d10
 8003c90:	20000cfc 	.word	0x20000cfc
 8003c94:	20000cf0 	.word	0x20000cf0
 8003c98:	20000818 	.word	0x20000818
 8003c9c:	20000814 	.word	0x20000814

08003ca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10b      	bne.n	8003cc8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	60fb      	str	r3, [r7, #12]
}
 8003cc2:	bf00      	nop
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cc8:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <vTaskPlaceOnEventList+0x48>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3318      	adds	r3, #24
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7fe fe70 	bl	80029b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	6838      	ldr	r0, [r7, #0]
 8003cda:	f000 fa81 	bl	80041e0 <prvAddCurrentTaskToDelayedList>
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000814 	.word	0x20000814

08003cec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	617b      	str	r3, [r7, #20]
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	e7fd      	b.n	8003d12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d16:	4b0a      	ldr	r3, [pc, #40]	@ (8003d40 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3318      	adds	r3, #24
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7fe fe25 	bl	800296e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	68b8      	ldr	r0, [r7, #8]
 8003d34:	f000 fa54 	bl	80041e0 <prvAddCurrentTaskToDelayedList>
	}
 8003d38:	bf00      	nop
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000814 	.word	0x20000814

08003d44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	60fb      	str	r3, [r7, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	e7fd      	b.n	8003d6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	3318      	adds	r3, #24
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fe56 	bl	8002a28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003df4 <xTaskRemoveFromEventList+0xb0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d11d      	bne.n	8003dc0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe fe4d 	bl	8002a28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d92:	4b19      	ldr	r3, [pc, #100]	@ (8003df8 <xTaskRemoveFromEventList+0xb4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d903      	bls.n	8003da2 <xTaskRemoveFromEventList+0x5e>
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	4a16      	ldr	r2, [pc, #88]	@ (8003df8 <xTaskRemoveFromEventList+0xb4>)
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4a13      	ldr	r2, [pc, #76]	@ (8003dfc <xTaskRemoveFromEventList+0xb8>)
 8003db0:	441a      	add	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	3304      	adds	r3, #4
 8003db6:	4619      	mov	r1, r3
 8003db8:	4610      	mov	r0, r2
 8003dba:	f7fe fdd8 	bl	800296e <vListInsertEnd>
 8003dbe:	e005      	b.n	8003dcc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	3318      	adds	r3, #24
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	480e      	ldr	r0, [pc, #56]	@ (8003e00 <xTaskRemoveFromEventList+0xbc>)
 8003dc8:	f7fe fdd1 	bl	800296e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <xTaskRemoveFromEventList+0xc0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d905      	bls.n	8003de6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003dde:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <xTaskRemoveFromEventList+0xc4>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e001      	b.n	8003dea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003dea:	697b      	ldr	r3, [r7, #20]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000d10 	.word	0x20000d10
 8003df8:	20000cf0 	.word	0x20000cf0
 8003dfc:	20000818 	.word	0x20000818
 8003e00:	20000ca8 	.word	0x20000ca8
 8003e04:	20000814 	.word	0x20000814
 8003e08:	20000cfc 	.word	0x20000cfc

08003e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e14:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <vTaskInternalSetTimeOutState+0x24>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e1c:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <vTaskInternalSetTimeOutState+0x28>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	605a      	str	r2, [r3, #4]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	20000d00 	.word	0x20000d00
 8003e34:	20000cec 	.word	0x20000cec

08003e38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10b      	bne.n	8003e60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	613b      	str	r3, [r7, #16]
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	60fb      	str	r3, [r7, #12]
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	e7fd      	b.n	8003e7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003e7e:	f000 fe8b 	bl	8004b98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e82:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef8 <xTaskCheckForTimeOut+0xc0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d102      	bne.n	8003ea2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	e023      	b.n	8003eea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <xTaskCheckForTimeOut+0xc4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d007      	beq.n	8003ebe <xTaskCheckForTimeOut+0x86>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e015      	b.n	8003eea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d20b      	bcs.n	8003ee0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff99 	bl	8003e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	e004      	b.n	8003eea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003eea:	f000 fe87 	bl	8004bfc <vPortExitCritical>

	return xReturn;
 8003eee:	69fb      	ldr	r3, [r7, #28]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000cec 	.word	0x20000cec
 8003efc:	20000d00 	.word	0x20000d00

08003f00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f04:	4b03      	ldr	r3, [pc, #12]	@ (8003f14 <vTaskMissedYield+0x14>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	20000cfc 	.word	0x20000cfc

08003f18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f20:	f000 f852 	bl	8003fc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f24:	4b06      	ldr	r3, [pc, #24]	@ (8003f40 <prvIdleTask+0x28>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d9f9      	bls.n	8003f20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f2c:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <prvIdleTask+0x2c>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f3c:	e7f0      	b.n	8003f20 <prvIdleTask+0x8>
 8003f3e:	bf00      	nop
 8003f40:	20000818 	.word	0x20000818
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f4e:	2300      	movs	r3, #0
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	e00c      	b.n	8003f6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4a12      	ldr	r2, [pc, #72]	@ (8003fa8 <prvInitialiseTaskLists+0x60>)
 8003f60:	4413      	add	r3, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fcd6 	bl	8002914 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b37      	cmp	r3, #55	@ 0x37
 8003f72:	d9ef      	bls.n	8003f54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f74:	480d      	ldr	r0, [pc, #52]	@ (8003fac <prvInitialiseTaskLists+0x64>)
 8003f76:	f7fe fccd 	bl	8002914 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f7a:	480d      	ldr	r0, [pc, #52]	@ (8003fb0 <prvInitialiseTaskLists+0x68>)
 8003f7c:	f7fe fcca 	bl	8002914 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f80:	480c      	ldr	r0, [pc, #48]	@ (8003fb4 <prvInitialiseTaskLists+0x6c>)
 8003f82:	f7fe fcc7 	bl	8002914 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f86:	480c      	ldr	r0, [pc, #48]	@ (8003fb8 <prvInitialiseTaskLists+0x70>)
 8003f88:	f7fe fcc4 	bl	8002914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f8c:	480b      	ldr	r0, [pc, #44]	@ (8003fbc <prvInitialiseTaskLists+0x74>)
 8003f8e:	f7fe fcc1 	bl	8002914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f92:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc0 <prvInitialiseTaskLists+0x78>)
 8003f94:	4a05      	ldr	r2, [pc, #20]	@ (8003fac <prvInitialiseTaskLists+0x64>)
 8003f96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f98:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc4 <prvInitialiseTaskLists+0x7c>)
 8003f9a:	4a05      	ldr	r2, [pc, #20]	@ (8003fb0 <prvInitialiseTaskLists+0x68>)
 8003f9c:	601a      	str	r2, [r3, #0]
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000818 	.word	0x20000818
 8003fac:	20000c78 	.word	0x20000c78
 8003fb0:	20000c8c 	.word	0x20000c8c
 8003fb4:	20000ca8 	.word	0x20000ca8
 8003fb8:	20000cbc 	.word	0x20000cbc
 8003fbc:	20000cd4 	.word	0x20000cd4
 8003fc0:	20000ca0 	.word	0x20000ca0
 8003fc4:	20000ca4 	.word	0x20000ca4

08003fc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fce:	e019      	b.n	8004004 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fd0:	f000 fde2 	bl	8004b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd4:	4b10      	ldr	r3, [pc, #64]	@ (8004018 <prvCheckTasksWaitingTermination+0x50>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe fd21 	bl	8002a28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800401c <prvCheckTasksWaitingTermination+0x54>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	4a0b      	ldr	r2, [pc, #44]	@ (800401c <prvCheckTasksWaitingTermination+0x54>)
 8003fee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <prvCheckTasksWaitingTermination+0x58>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8004020 <prvCheckTasksWaitingTermination+0x58>)
 8003ff8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ffa:	f000 fdff 	bl	8004bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f810 	bl	8004024 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004004:	4b06      	ldr	r3, [pc, #24]	@ (8004020 <prvCheckTasksWaitingTermination+0x58>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e1      	bne.n	8003fd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000cbc 	.word	0x20000cbc
 800401c:	20000ce8 	.word	0x20000ce8
 8004020:	20000cd0 	.word	0x20000cd0

08004024 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004032:	2b00      	cmp	r3, #0
 8004034:	d108      	bne.n	8004048 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	4618      	mov	r0, r3
 800403c:	f000 ff9c 	bl	8004f78 <vPortFree>
				vPortFree( pxTCB );
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 ff99 	bl	8004f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004046:	e019      	b.n	800407c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800404e:	2b01      	cmp	r3, #1
 8004050:	d103      	bne.n	800405a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 ff90 	bl	8004f78 <vPortFree>
	}
 8004058:	e010      	b.n	800407c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004060:	2b02      	cmp	r3, #2
 8004062:	d00b      	beq.n	800407c <prvDeleteTCB+0x58>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	60fb      	str	r3, [r7, #12]
}
 8004076:	bf00      	nop
 8004078:	bf00      	nop
 800407a:	e7fd      	b.n	8004078 <prvDeleteTCB+0x54>
	}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800408a:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <prvResetNextTaskUnblockTime+0x38>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004094:	4b0a      	ldr	r3, [pc, #40]	@ (80040c0 <prvResetNextTaskUnblockTime+0x3c>)
 8004096:	f04f 32ff 	mov.w	r2, #4294967295
 800409a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800409c:	e008      	b.n	80040b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800409e:	4b07      	ldr	r3, [pc, #28]	@ (80040bc <prvResetNextTaskUnblockTime+0x38>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a04      	ldr	r2, [pc, #16]	@ (80040c0 <prvResetNextTaskUnblockTime+0x3c>)
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	20000ca0 	.word	0x20000ca0
 80040c0:	20000d08 	.word	0x20000d08

080040c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040ca:	4b0b      	ldr	r3, [pc, #44]	@ (80040f8 <xTaskGetSchedulerState+0x34>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040d2:	2301      	movs	r3, #1
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	e008      	b.n	80040ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040d8:	4b08      	ldr	r3, [pc, #32]	@ (80040fc <xTaskGetSchedulerState+0x38>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040e0:	2302      	movs	r3, #2
 80040e2:	607b      	str	r3, [r7, #4]
 80040e4:	e001      	b.n	80040ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040ea:	687b      	ldr	r3, [r7, #4]
	}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	20000cf4 	.word	0x20000cf4
 80040fc:	20000d10 	.word	0x20000d10

08004100 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d058      	beq.n	80041c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004116:	4b2f      	ldr	r3, [pc, #188]	@ (80041d4 <xTaskPriorityDisinherit+0xd4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	429a      	cmp	r2, r3
 800411e:	d00b      	beq.n	8004138 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	60fb      	str	r3, [r7, #12]
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10b      	bne.n	8004158 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	60bb      	str	r3, [r7, #8]
}
 8004152:	bf00      	nop
 8004154:	bf00      	nop
 8004156:	e7fd      	b.n	8004154 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800415c:	1e5a      	subs	r2, r3, #1
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416a:	429a      	cmp	r2, r3
 800416c:	d02c      	beq.n	80041c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004172:	2b00      	cmp	r3, #0
 8004174:	d128      	bne.n	80041c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	3304      	adds	r3, #4
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fc54 	bl	8002a28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004198:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <xTaskPriorityDisinherit+0xd8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d903      	bls.n	80041a8 <xTaskPriorityDisinherit+0xa8>
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	4a0c      	ldr	r2, [pc, #48]	@ (80041d8 <xTaskPriorityDisinherit+0xd8>)
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4a09      	ldr	r2, [pc, #36]	@ (80041dc <xTaskPriorityDisinherit+0xdc>)
 80041b6:	441a      	add	r2, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f7fe fbd5 	bl	800296e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041c8:	697b      	ldr	r3, [r7, #20]
	}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000814 	.word	0x20000814
 80041d8:	20000cf0 	.word	0x20000cf0
 80041dc:	20000818 	.word	0x20000818

080041e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041ea:	4b21      	ldr	r3, [pc, #132]	@ (8004270 <prvAddCurrentTaskToDelayedList+0x90>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041f0:	4b20      	ldr	r3, [pc, #128]	@ (8004274 <prvAddCurrentTaskToDelayedList+0x94>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe fc16 	bl	8002a28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004202:	d10a      	bne.n	800421a <prvAddCurrentTaskToDelayedList+0x3a>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d007      	beq.n	800421a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800420a:	4b1a      	ldr	r3, [pc, #104]	@ (8004274 <prvAddCurrentTaskToDelayedList+0x94>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4819      	ldr	r0, [pc, #100]	@ (8004278 <prvAddCurrentTaskToDelayedList+0x98>)
 8004214:	f7fe fbab 	bl	800296e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004218:	e026      	b.n	8004268 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4413      	add	r3, r2
 8004220:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004222:	4b14      	ldr	r3, [pc, #80]	@ (8004274 <prvAddCurrentTaskToDelayedList+0x94>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	429a      	cmp	r2, r3
 8004230:	d209      	bcs.n	8004246 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004232:	4b12      	ldr	r3, [pc, #72]	@ (800427c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4b0f      	ldr	r3, [pc, #60]	@ (8004274 <prvAddCurrentTaskToDelayedList+0x94>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3304      	adds	r3, #4
 800423c:	4619      	mov	r1, r3
 800423e:	4610      	mov	r0, r2
 8004240:	f7fe fbb9 	bl	80029b6 <vListInsert>
}
 8004244:	e010      	b.n	8004268 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004246:	4b0e      	ldr	r3, [pc, #56]	@ (8004280 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b0a      	ldr	r3, [pc, #40]	@ (8004274 <prvAddCurrentTaskToDelayedList+0x94>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3304      	adds	r3, #4
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f7fe fbaf 	bl	80029b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004258:	4b0a      	ldr	r3, [pc, #40]	@ (8004284 <prvAddCurrentTaskToDelayedList+0xa4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	429a      	cmp	r2, r3
 8004260:	d202      	bcs.n	8004268 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004262:	4a08      	ldr	r2, [pc, #32]	@ (8004284 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000cec 	.word	0x20000cec
 8004274:	20000814 	.word	0x20000814
 8004278:	20000cd4 	.word	0x20000cd4
 800427c:	20000ca4 	.word	0x20000ca4
 8004280:	20000ca0 	.word	0x20000ca0
 8004284:	20000d08 	.word	0x20000d08

08004288 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	@ 0x28
 800428c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004292:	f000 fb13 	bl	80048bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004296:	4b1d      	ldr	r3, [pc, #116]	@ (800430c <xTimerCreateTimerTask+0x84>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d021      	beq.n	80042e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042a6:	1d3a      	adds	r2, r7, #4
 80042a8:	f107 0108 	add.w	r1, r7, #8
 80042ac:	f107 030c 	add.w	r3, r7, #12
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe fb15 	bl	80028e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	9202      	str	r2, [sp, #8]
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	2302      	movs	r3, #2
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	2300      	movs	r3, #0
 80042c6:	460a      	mov	r2, r1
 80042c8:	4911      	ldr	r1, [pc, #68]	@ (8004310 <xTimerCreateTimerTask+0x88>)
 80042ca:	4812      	ldr	r0, [pc, #72]	@ (8004314 <xTimerCreateTimerTask+0x8c>)
 80042cc:	f7ff f8d0 	bl	8003470 <xTaskCreateStatic>
 80042d0:	4603      	mov	r3, r0
 80042d2:	4a11      	ldr	r2, [pc, #68]	@ (8004318 <xTimerCreateTimerTask+0x90>)
 80042d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042d6:	4b10      	ldr	r3, [pc, #64]	@ (8004318 <xTimerCreateTimerTask+0x90>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80042de:	2301      	movs	r3, #1
 80042e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	613b      	str	r3, [r7, #16]
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004300:	697b      	ldr	r3, [r7, #20]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000d44 	.word	0x20000d44
 8004310:	080053f4 	.word	0x080053f4
 8004314:	08004455 	.word	0x08004455
 8004318:	20000d48 	.word	0x20000d48

0800431c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	@ 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <xTimerGenericCommand+0x30>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	623b      	str	r3, [r7, #32]
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800434c:	4b19      	ldr	r3, [pc, #100]	@ (80043b4 <xTimerGenericCommand+0x98>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02a      	beq.n	80043aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b05      	cmp	r3, #5
 8004364:	dc18      	bgt.n	8004398 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004366:	f7ff fead 	bl	80040c4 <xTaskGetSchedulerState>
 800436a:	4603      	mov	r3, r0
 800436c:	2b02      	cmp	r3, #2
 800436e:	d109      	bne.n	8004384 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004370:	4b10      	ldr	r3, [pc, #64]	@ (80043b4 <xTimerGenericCommand+0x98>)
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	f107 0110 	add.w	r1, r7, #16
 8004378:	2300      	movs	r3, #0
 800437a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800437c:	f7fe fc88 	bl	8002c90 <xQueueGenericSend>
 8004380:	6278      	str	r0, [r7, #36]	@ 0x24
 8004382:	e012      	b.n	80043aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004384:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <xTimerGenericCommand+0x98>)
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	f107 0110 	add.w	r1, r7, #16
 800438c:	2300      	movs	r3, #0
 800438e:	2200      	movs	r2, #0
 8004390:	f7fe fc7e 	bl	8002c90 <xQueueGenericSend>
 8004394:	6278      	str	r0, [r7, #36]	@ 0x24
 8004396:	e008      	b.n	80043aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004398:	4b06      	ldr	r3, [pc, #24]	@ (80043b4 <xTimerGenericCommand+0x98>)
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	f107 0110 	add.w	r1, r7, #16
 80043a0:	2300      	movs	r3, #0
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	f7fe fd76 	bl	8002e94 <xQueueGenericSendFromISR>
 80043a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3728      	adds	r7, #40	@ 0x28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000d44 	.word	0x20000d44

080043b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c2:	4b23      	ldr	r3, [pc, #140]	@ (8004450 <prvProcessExpiredTimer+0x98>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe fb29 	bl	8002a28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d023      	beq.n	800442c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	18d1      	adds	r1, r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	6978      	ldr	r0, [r7, #20]
 80043f2:	f000 f8d5 	bl	80045a0 <prvInsertTimerInActiveList>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043fc:	2300      	movs	r3, #0
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	2300      	movs	r3, #0
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	2100      	movs	r1, #0
 8004406:	6978      	ldr	r0, [r7, #20]
 8004408:	f7ff ff88 	bl	800431c <xTimerGenericCommand>
 800440c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d114      	bne.n	800443e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	60fb      	str	r3, [r7, #12]
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	e7fd      	b.n	8004428 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	b2da      	uxtb	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	6978      	ldr	r0, [r7, #20]
 8004444:	4798      	blx	r3
}
 8004446:	bf00      	nop
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000d3c 	.word	0x20000d3c

08004454 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800445c:	f107 0308 	add.w	r3, r7, #8
 8004460:	4618      	mov	r0, r3
 8004462:	f000 f859 	bl	8004518 <prvGetNextExpireTime>
 8004466:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4619      	mov	r1, r3
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f805 	bl	800447c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004472:	f000 f8d7 	bl	8004624 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004476:	bf00      	nop
 8004478:	e7f0      	b.n	800445c <prvTimerTask+0x8>
	...

0800447c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004486:	f7ff fa37 	bl	80038f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800448a:	f107 0308 	add.w	r3, r7, #8
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f866 	bl	8004560 <prvSampleTimeNow>
 8004494:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d130      	bne.n	80044fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10a      	bne.n	80044b8 <prvProcessTimerOrBlockTask+0x3c>
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d806      	bhi.n	80044b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044aa:	f7ff fa33 	bl	8003914 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff ff81 	bl	80043b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80044b6:	e024      	b.n	8004502 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d008      	beq.n	80044d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044be:	4b13      	ldr	r3, [pc, #76]	@ (800450c <prvProcessTimerOrBlockTask+0x90>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <prvProcessTimerOrBlockTask+0x50>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <prvProcessTimerOrBlockTask+0x52>
 80044cc:	2300      	movs	r3, #0
 80044ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <prvProcessTimerOrBlockTask+0x94>)
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	4619      	mov	r1, r3
 80044de:	f7fe ff93 	bl	8003408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044e2:	f7ff fa17 	bl	8003914 <xTaskResumeAll>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044ec:	4b09      	ldr	r3, [pc, #36]	@ (8004514 <prvProcessTimerOrBlockTask+0x98>)
 80044ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	f3bf 8f6f 	isb	sy
}
 80044fc:	e001      	b.n	8004502 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80044fe:	f7ff fa09 	bl	8003914 <xTaskResumeAll>
}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000d40 	.word	0x20000d40
 8004510:	20000d44 	.word	0x20000d44
 8004514:	e000ed04 	.word	0xe000ed04

08004518 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004520:	4b0e      	ldr	r3, [pc, #56]	@ (800455c <prvGetNextExpireTime+0x44>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <prvGetNextExpireTime+0x16>
 800452a:	2201      	movs	r2, #1
 800452c:	e000      	b.n	8004530 <prvGetNextExpireTime+0x18>
 800452e:	2200      	movs	r2, #0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800453c:	4b07      	ldr	r3, [pc, #28]	@ (800455c <prvGetNextExpireTime+0x44>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e001      	b.n	800454c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800454c:	68fb      	ldr	r3, [r7, #12]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000d3c 	.word	0x20000d3c

08004560 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004568:	f7ff fa72 	bl	8003a50 <xTaskGetTickCount>
 800456c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800456e:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <prvSampleTimeNow+0x3c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	429a      	cmp	r2, r3
 8004576:	d205      	bcs.n	8004584 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004578:	f000 f93a 	bl	80047f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e002      	b.n	800458a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800458a:	4a04      	ldr	r2, [pc, #16]	@ (800459c <prvSampleTimeNow+0x3c>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004590:	68fb      	ldr	r3, [r7, #12]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000d4c 	.word	0x20000d4c

080045a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d812      	bhi.n	80045ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	1ad2      	subs	r2, r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d302      	bcc.n	80045da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045d4:	2301      	movs	r3, #1
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	e01b      	b.n	8004612 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045da:	4b10      	ldr	r3, [pc, #64]	@ (800461c <prvInsertTimerInActiveList+0x7c>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3304      	adds	r3, #4
 80045e2:	4619      	mov	r1, r3
 80045e4:	4610      	mov	r0, r2
 80045e6:	f7fe f9e6 	bl	80029b6 <vListInsert>
 80045ea:	e012      	b.n	8004612 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d206      	bcs.n	8004602 <prvInsertTimerInActiveList+0x62>
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d302      	bcc.n	8004602 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80045fc:	2301      	movs	r3, #1
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e007      	b.n	8004612 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004602:	4b07      	ldr	r3, [pc, #28]	@ (8004620 <prvInsertTimerInActiveList+0x80>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3304      	adds	r3, #4
 800460a:	4619      	mov	r1, r3
 800460c:	4610      	mov	r0, r2
 800460e:	f7fe f9d2 	bl	80029b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004612:	697b      	ldr	r3, [r7, #20]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20000d40 	.word	0x20000d40
 8004620:	20000d3c 	.word	0x20000d3c

08004624 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08e      	sub	sp, #56	@ 0x38
 8004628:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800462a:	e0ce      	b.n	80047ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	da19      	bge.n	8004666 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004632:	1d3b      	adds	r3, r7, #4
 8004634:	3304      	adds	r3, #4
 8004636:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	61fb      	str	r3, [r7, #28]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800465c:	6850      	ldr	r0, [r2, #4]
 800465e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004660:	6892      	ldr	r2, [r2, #8]
 8004662:	4611      	mov	r1, r2
 8004664:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f2c0 80ae 	blt.w	80047ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800467a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467c:	3304      	adds	r3, #4
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe f9d2 	bl	8002a28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004684:	463b      	mov	r3, r7
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ff6a 	bl	8004560 <prvSampleTimeNow>
 800468c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b09      	cmp	r3, #9
 8004692:	f200 8097 	bhi.w	80047c4 <prvProcessReceivedCommands+0x1a0>
 8004696:	a201      	add	r2, pc, #4	@ (adr r2, 800469c <prvProcessReceivedCommands+0x78>)
 8004698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469c:	080046c5 	.word	0x080046c5
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046c5 	.word	0x080046c5
 80046a8:	0800473b 	.word	0x0800473b
 80046ac:	0800474f 	.word	0x0800474f
 80046b0:	0800479b 	.word	0x0800479b
 80046b4:	080046c5 	.word	0x080046c5
 80046b8:	080046c5 	.word	0x080046c5
 80046bc:	0800473b 	.word	0x0800473b
 80046c0:	0800474f 	.word	0x0800474f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	18d1      	adds	r1, r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046e4:	f7ff ff5c 	bl	80045a0 <prvInsertTimerInActiveList>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d06c      	beq.n	80047c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d061      	beq.n	80047c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	441a      	add	r2, r3
 800470c:	2300      	movs	r3, #0
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2300      	movs	r3, #0
 8004712:	2100      	movs	r1, #0
 8004714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004716:	f7ff fe01 	bl	800431c <xTimerGenericCommand>
 800471a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d152      	bne.n	80047c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	61bb      	str	r3, [r7, #24]
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	e7fd      	b.n	8004736 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800473a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	b2da      	uxtb	r2, r3
 8004746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004748:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800474c:	e03d      	b.n	80047ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	b2da      	uxtb	r2, r3
 800475a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004764:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	617b      	str	r3, [r7, #20]
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	e7fd      	b.n	8004782 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	18d1      	adds	r1, r2, r3
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004794:	f7ff ff04 	bl	80045a0 <prvInsertTimerInActiveList>
					break;
 8004798:	e017      	b.n	80047ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d103      	bne.n	80047b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80047a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047aa:	f000 fbe5 	bl	8004f78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047ae:	e00c      	b.n	80047ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80047c2:	e002      	b.n	80047ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80047c4:	bf00      	nop
 80047c6:	e000      	b.n	80047ca <prvProcessReceivedCommands+0x1a6>
					break;
 80047c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047ca:	4b08      	ldr	r3, [pc, #32]	@ (80047ec <prvProcessReceivedCommands+0x1c8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	1d39      	adds	r1, r7, #4
 80047d0:	2200      	movs	r2, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe fbfc 	bl	8002fd0 <xQueueReceive>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f47f af26 	bne.w	800462c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	3730      	adds	r7, #48	@ 0x30
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000d44 	.word	0x20000d44

080047f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047f6:	e049      	b.n	800488c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047f8:	4b2e      	ldr	r3, [pc, #184]	@ (80048b4 <prvSwitchTimerLists+0xc4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004802:	4b2c      	ldr	r3, [pc, #176]	@ (80048b4 <prvSwitchTimerLists+0xc4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3304      	adds	r3, #4
 8004810:	4618      	mov	r0, r3
 8004812:	f7fe f909 	bl	8002a28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02f      	beq.n	800488c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4413      	add	r3, r2
 8004834:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	429a      	cmp	r2, r3
 800483c:	d90e      	bls.n	800485c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800484a:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <prvSwitchTimerLists+0xc4>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3304      	adds	r3, #4
 8004852:	4619      	mov	r1, r3
 8004854:	4610      	mov	r0, r2
 8004856:	f7fe f8ae 	bl	80029b6 <vListInsert>
 800485a:	e017      	b.n	800488c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800485c:	2300      	movs	r3, #0
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2300      	movs	r3, #0
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	2100      	movs	r1, #0
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f7ff fd58 	bl	800431c <xTimerGenericCommand>
 800486c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	603b      	str	r3, [r7, #0]
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800488c:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <prvSwitchTimerLists+0xc4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1b0      	bne.n	80047f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004896:	4b07      	ldr	r3, [pc, #28]	@ (80048b4 <prvSwitchTimerLists+0xc4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800489c:	4b06      	ldr	r3, [pc, #24]	@ (80048b8 <prvSwitchTimerLists+0xc8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a04      	ldr	r2, [pc, #16]	@ (80048b4 <prvSwitchTimerLists+0xc4>)
 80048a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048a4:	4a04      	ldr	r2, [pc, #16]	@ (80048b8 <prvSwitchTimerLists+0xc8>)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	6013      	str	r3, [r2, #0]
}
 80048aa:	bf00      	nop
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000d3c 	.word	0x20000d3c
 80048b8:	20000d40 	.word	0x20000d40

080048bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048c2:	f000 f969 	bl	8004b98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048c6:	4b15      	ldr	r3, [pc, #84]	@ (800491c <prvCheckForValidListAndQueue+0x60>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d120      	bne.n	8004910 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80048ce:	4814      	ldr	r0, [pc, #80]	@ (8004920 <prvCheckForValidListAndQueue+0x64>)
 80048d0:	f7fe f820 	bl	8002914 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048d4:	4813      	ldr	r0, [pc, #76]	@ (8004924 <prvCheckForValidListAndQueue+0x68>)
 80048d6:	f7fe f81d 	bl	8002914 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048da:	4b13      	ldr	r3, [pc, #76]	@ (8004928 <prvCheckForValidListAndQueue+0x6c>)
 80048dc:	4a10      	ldr	r2, [pc, #64]	@ (8004920 <prvCheckForValidListAndQueue+0x64>)
 80048de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80048e0:	4b12      	ldr	r3, [pc, #72]	@ (800492c <prvCheckForValidListAndQueue+0x70>)
 80048e2:	4a10      	ldr	r2, [pc, #64]	@ (8004924 <prvCheckForValidListAndQueue+0x68>)
 80048e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048e6:	2300      	movs	r3, #0
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <prvCheckForValidListAndQueue+0x74>)
 80048ec:	4a11      	ldr	r2, [pc, #68]	@ (8004934 <prvCheckForValidListAndQueue+0x78>)
 80048ee:	2110      	movs	r1, #16
 80048f0:	200a      	movs	r0, #10
 80048f2:	f7fe f92d 	bl	8002b50 <xQueueGenericCreateStatic>
 80048f6:	4603      	mov	r3, r0
 80048f8:	4a08      	ldr	r2, [pc, #32]	@ (800491c <prvCheckForValidListAndQueue+0x60>)
 80048fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80048fc:	4b07      	ldr	r3, [pc, #28]	@ (800491c <prvCheckForValidListAndQueue+0x60>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004904:	4b05      	ldr	r3, [pc, #20]	@ (800491c <prvCheckForValidListAndQueue+0x60>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	490b      	ldr	r1, [pc, #44]	@ (8004938 <prvCheckForValidListAndQueue+0x7c>)
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fd52 	bl	80033b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004910:	f000 f974 	bl	8004bfc <vPortExitCritical>
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000d44 	.word	0x20000d44
 8004920:	20000d14 	.word	0x20000d14
 8004924:	20000d28 	.word	0x20000d28
 8004928:	20000d3c 	.word	0x20000d3c
 800492c:	20000d40 	.word	0x20000d40
 8004930:	20000df0 	.word	0x20000df0
 8004934:	20000d50 	.word	0x20000d50
 8004938:	080053fc 	.word	0x080053fc

0800493c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3b04      	subs	r3, #4
 800494c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3b04      	subs	r3, #4
 800495a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f023 0201 	bic.w	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3b04      	subs	r3, #4
 800496a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800496c:	4a0c      	ldr	r2, [pc, #48]	@ (80049a0 <pxPortInitialiseStack+0x64>)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3b14      	subs	r3, #20
 8004976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3b04      	subs	r3, #4
 8004982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f06f 0202 	mvn.w	r2, #2
 800498a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3b20      	subs	r3, #32
 8004990:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004992:	68fb      	ldr	r3, [r7, #12]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	080049a5 	.word	0x080049a5

080049a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049ae:	4b13      	ldr	r3, [pc, #76]	@ (80049fc <prvTaskExitError+0x58>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d00b      	beq.n	80049d0 <prvTaskExitError+0x2c>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	60fb      	str	r3, [r7, #12]
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <prvTaskExitError+0x28>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	60bb      	str	r3, [r7, #8]
}
 80049e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049e4:	bf00      	nop
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0fc      	beq.n	80049e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	2000000c 	.word	0x2000000c

08004a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a00:	4b07      	ldr	r3, [pc, #28]	@ (8004a20 <pxCurrentTCBConst2>)
 8004a02:	6819      	ldr	r1, [r3, #0]
 8004a04:	6808      	ldr	r0, [r1, #0]
 8004a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0a:	f380 8809 	msr	PSP, r0
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f380 8811 	msr	BASEPRI, r0
 8004a1a:	4770      	bx	lr
 8004a1c:	f3af 8000 	nop.w

08004a20 <pxCurrentTCBConst2>:
 8004a20:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop

08004a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a28:	4808      	ldr	r0, [pc, #32]	@ (8004a4c <prvPortStartFirstTask+0x24>)
 8004a2a:	6800      	ldr	r0, [r0, #0]
 8004a2c:	6800      	ldr	r0, [r0, #0]
 8004a2e:	f380 8808 	msr	MSP, r0
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f380 8814 	msr	CONTROL, r0
 8004a3a:	b662      	cpsie	i
 8004a3c:	b661      	cpsie	f
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	df00      	svc	0
 8004a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a4a:	bf00      	nop
 8004a4c:	e000ed08 	.word	0xe000ed08

08004a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a56:	4b47      	ldr	r3, [pc, #284]	@ (8004b74 <xPortStartScheduler+0x124>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a47      	ldr	r2, [pc, #284]	@ (8004b78 <xPortStartScheduler+0x128>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d10b      	bne.n	8004a78 <xPortStartScheduler+0x28>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60fb      	str	r3, [r7, #12]
}
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a78:	4b3e      	ldr	r3, [pc, #248]	@ (8004b74 <xPortStartScheduler+0x124>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b7c <xPortStartScheduler+0x12c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10b      	bne.n	8004a9a <xPortStartScheduler+0x4a>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	613b      	str	r3, [r7, #16]
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	e7fd      	b.n	8004a96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a9a:	4b39      	ldr	r3, [pc, #228]	@ (8004b80 <xPortStartScheduler+0x130>)
 8004a9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	22ff      	movs	r2, #255	@ 0xff
 8004aaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	4b31      	ldr	r3, [pc, #196]	@ (8004b84 <xPortStartScheduler+0x134>)
 8004ac0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ac2:	4b31      	ldr	r3, [pc, #196]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004ac4:	2207      	movs	r2, #7
 8004ac6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ac8:	e009      	b.n	8004ade <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004aca:	4b2f      	ldr	r3, [pc, #188]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004ad2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae6:	2b80      	cmp	r3, #128	@ 0x80
 8004ae8:	d0ef      	beq.n	8004aca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aea:	4b27      	ldr	r3, [pc, #156]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f1c3 0307 	rsb	r3, r3, #7
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d00b      	beq.n	8004b0e <xPortStartScheduler+0xbe>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	60bb      	str	r3, [r7, #8]
}
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
 8004b0c:	e7fd      	b.n	8004b0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	4a1c      	ldr	r2, [pc, #112]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b18:	4b1b      	ldr	r3, [pc, #108]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b20:	4a19      	ldr	r2, [pc, #100]	@ (8004b88 <xPortStartScheduler+0x138>)
 8004b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b2c:	4b17      	ldr	r3, [pc, #92]	@ (8004b8c <xPortStartScheduler+0x13c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a16      	ldr	r2, [pc, #88]	@ (8004b8c <xPortStartScheduler+0x13c>)
 8004b32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b38:	4b14      	ldr	r3, [pc, #80]	@ (8004b8c <xPortStartScheduler+0x13c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a13      	ldr	r2, [pc, #76]	@ (8004b8c <xPortStartScheduler+0x13c>)
 8004b3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b44:	f000 f8da 	bl	8004cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b48:	4b11      	ldr	r3, [pc, #68]	@ (8004b90 <xPortStartScheduler+0x140>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b4e:	f000 f8f9 	bl	8004d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b52:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <xPortStartScheduler+0x144>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a0f      	ldr	r2, [pc, #60]	@ (8004b94 <xPortStartScheduler+0x144>)
 8004b58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004b5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b5e:	f7ff ff63 	bl	8004a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b62:	f7ff f83f 	bl	8003be4 <vTaskSwitchContext>
	prvTaskExitError();
 8004b66:	f7ff ff1d 	bl	80049a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	e000ed00 	.word	0xe000ed00
 8004b78:	410fc271 	.word	0x410fc271
 8004b7c:	410fc270 	.word	0x410fc270
 8004b80:	e000e400 	.word	0xe000e400
 8004b84:	20000e40 	.word	0x20000e40
 8004b88:	20000e44 	.word	0x20000e44
 8004b8c:	e000ed20 	.word	0xe000ed20
 8004b90:	2000000c 	.word	0x2000000c
 8004b94:	e000ef34 	.word	0xe000ef34

08004b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	607b      	str	r3, [r7, #4]
}
 8004bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bb2:	4b10      	ldr	r3, [pc, #64]	@ (8004bf4 <vPortEnterCritical+0x5c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf4 <vPortEnterCritical+0x5c>)
 8004bba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <vPortEnterCritical+0x5c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d110      	bne.n	8004be6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf8 <vPortEnterCritical+0x60>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	603b      	str	r3, [r7, #0]
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	e7fd      	b.n	8004be2 <vPortEnterCritical+0x4a>
	}
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	2000000c 	.word	0x2000000c
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c02:	4b12      	ldr	r3, [pc, #72]	@ (8004c4c <vPortExitCritical+0x50>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <vPortExitCritical+0x26>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	607b      	str	r3, [r7, #4]
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	e7fd      	b.n	8004c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c22:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <vPortExitCritical+0x50>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	4a08      	ldr	r2, [pc, #32]	@ (8004c4c <vPortExitCritical+0x50>)
 8004c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c2c:	4b07      	ldr	r3, [pc, #28]	@ (8004c4c <vPortExitCritical+0x50>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d105      	bne.n	8004c40 <vPortExitCritical+0x44>
 8004c34:	2300      	movs	r3, #0
 8004c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f383 8811 	msr	BASEPRI, r3
}
 8004c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	2000000c 	.word	0x2000000c

08004c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c50:	f3ef 8009 	mrs	r0, PSP
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	4b15      	ldr	r3, [pc, #84]	@ (8004cb0 <pxCurrentTCBConst>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	f01e 0f10 	tst.w	lr, #16
 8004c60:	bf08      	it	eq
 8004c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6a:	6010      	str	r0, [r2, #0]
 8004c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c74:	f380 8811 	msr	BASEPRI, r0
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f7fe ffb0 	bl	8003be4 <vTaskSwitchContext>
 8004c84:	f04f 0000 	mov.w	r0, #0
 8004c88:	f380 8811 	msr	BASEPRI, r0
 8004c8c:	bc09      	pop	{r0, r3}
 8004c8e:	6819      	ldr	r1, [r3, #0]
 8004c90:	6808      	ldr	r0, [r1, #0]
 8004c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c96:	f01e 0f10 	tst.w	lr, #16
 8004c9a:	bf08      	it	eq
 8004c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ca0:	f380 8809 	msr	PSP, r0
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	f3af 8000 	nop.w

08004cb0 <pxCurrentTCBConst>:
 8004cb0:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop

08004cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	607b      	str	r3, [r7, #4]
}
 8004cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cd2:	f7fe fecd 	bl	8003a70 <xTaskIncrementTick>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cdc:	4b06      	ldr	r3, [pc, #24]	@ (8004cf8 <xPortSysTickHandler+0x40>)
 8004cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f383 8811 	msr	BASEPRI, r3
}
 8004cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	e000ed04 	.word	0xe000ed04

08004cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d00:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <vPortSetupTimerInterrupt+0x34>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d06:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <vPortSetupTimerInterrupt+0x38>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <vPortSetupTimerInterrupt+0x3c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a0a      	ldr	r2, [pc, #40]	@ (8004d3c <vPortSetupTimerInterrupt+0x40>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	4a09      	ldr	r2, [pc, #36]	@ (8004d40 <vPortSetupTimerInterrupt+0x44>)
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d1e:	4b04      	ldr	r3, [pc, #16]	@ (8004d30 <vPortSetupTimerInterrupt+0x34>)
 8004d20:	2207      	movs	r2, #7
 8004d22:	601a      	str	r2, [r3, #0]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	e000e010 	.word	0xe000e010
 8004d34:	e000e018 	.word	0xe000e018
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	10624dd3 	.word	0x10624dd3
 8004d40:	e000e014 	.word	0xe000e014

08004d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004d54 <vPortEnableVFP+0x10>
 8004d48:	6801      	ldr	r1, [r0, #0]
 8004d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004d4e:	6001      	str	r1, [r0, #0]
 8004d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d52:	bf00      	nop
 8004d54:	e000ed88 	.word	0xe000ed88

08004d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d5e:	f3ef 8305 	mrs	r3, IPSR
 8004d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b0f      	cmp	r3, #15
 8004d68:	d915      	bls.n	8004d96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d6a:	4a18      	ldr	r2, [pc, #96]	@ (8004dcc <vPortValidateInterruptPriority+0x74>)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d74:	4b16      	ldr	r3, [pc, #88]	@ (8004dd0 <vPortValidateInterruptPriority+0x78>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	7afa      	ldrb	r2, [r7, #11]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d20b      	bcs.n	8004d96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	607b      	str	r3, [r7, #4]
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	e7fd      	b.n	8004d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d96:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd4 <vPortValidateInterruptPriority+0x7c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd8 <vPortValidateInterruptPriority+0x80>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d90b      	bls.n	8004dbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	603b      	str	r3, [r7, #0]
}
 8004db8:	bf00      	nop
 8004dba:	bf00      	nop
 8004dbc:	e7fd      	b.n	8004dba <vPortValidateInterruptPriority+0x62>
	}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	e000e3f0 	.word	0xe000e3f0
 8004dd0:	20000e40 	.word	0x20000e40
 8004dd4:	e000ed0c 	.word	0xe000ed0c
 8004dd8:	20000e44 	.word	0x20000e44

08004ddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	@ 0x28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004de8:	f7fe fd86 	bl	80038f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dec:	4b5c      	ldr	r3, [pc, #368]	@ (8004f60 <pvPortMalloc+0x184>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004df4:	f000 f924 	bl	8005040 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004df8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f64 <pvPortMalloc+0x188>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f040 8095 	bne.w	8004f30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01e      	beq.n	8004e4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4413      	add	r3, r2
 8004e12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d015      	beq.n	8004e4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f023 0307 	bic.w	r3, r3, #7
 8004e24:	3308      	adds	r3, #8
 8004e26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <pvPortMalloc+0x6e>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	617b      	str	r3, [r7, #20]
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	e7fd      	b.n	8004e46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d06f      	beq.n	8004f30 <pvPortMalloc+0x154>
 8004e50:	4b45      	ldr	r3, [pc, #276]	@ (8004f68 <pvPortMalloc+0x18c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d86a      	bhi.n	8004f30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e5a:	4b44      	ldr	r3, [pc, #272]	@ (8004f6c <pvPortMalloc+0x190>)
 8004e5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e5e:	4b43      	ldr	r3, [pc, #268]	@ (8004f6c <pvPortMalloc+0x190>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e64:	e004      	b.n	8004e70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d903      	bls.n	8004e82 <pvPortMalloc+0xa6>
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f1      	bne.n	8004e66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e82:	4b37      	ldr	r3, [pc, #220]	@ (8004f60 <pvPortMalloc+0x184>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d051      	beq.n	8004f30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2208      	movs	r2, #8
 8004e92:	4413      	add	r3, r2
 8004e94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	1ad2      	subs	r2, r2, r3
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d920      	bls.n	8004ef0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <pvPortMalloc+0xfc>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	613b      	str	r3, [r7, #16]
}
 8004ed2:	bf00      	nop
 8004ed4:	bf00      	nop
 8004ed6:	e7fd      	b.n	8004ed4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	1ad2      	subs	r2, r2, r3
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004eea:	69b8      	ldr	r0, [r7, #24]
 8004eec:	f000 f90a 	bl	8005104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f68 <pvPortMalloc+0x18c>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	4a1b      	ldr	r2, [pc, #108]	@ (8004f68 <pvPortMalloc+0x18c>)
 8004efc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004efe:	4b1a      	ldr	r3, [pc, #104]	@ (8004f68 <pvPortMalloc+0x18c>)
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	4b1b      	ldr	r3, [pc, #108]	@ (8004f70 <pvPortMalloc+0x194>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d203      	bcs.n	8004f12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f0a:	4b17      	ldr	r3, [pc, #92]	@ (8004f68 <pvPortMalloc+0x18c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a18      	ldr	r2, [pc, #96]	@ (8004f70 <pvPortMalloc+0x194>)
 8004f10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	4b13      	ldr	r3, [pc, #76]	@ (8004f64 <pvPortMalloc+0x188>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f26:	4b13      	ldr	r3, [pc, #76]	@ (8004f74 <pvPortMalloc+0x198>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	4a11      	ldr	r2, [pc, #68]	@ (8004f74 <pvPortMalloc+0x198>)
 8004f2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f30:	f7fe fcf0 	bl	8003914 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <pvPortMalloc+0x17a>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	60fb      	str	r3, [r7, #12]
}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	e7fd      	b.n	8004f52 <pvPortMalloc+0x176>
	return pvReturn;
 8004f56:	69fb      	ldr	r3, [r7, #28]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3728      	adds	r7, #40	@ 0x28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20004a50 	.word	0x20004a50
 8004f64:	20004a64 	.word	0x20004a64
 8004f68:	20004a54 	.word	0x20004a54
 8004f6c:	20004a48 	.word	0x20004a48
 8004f70:	20004a58 	.word	0x20004a58
 8004f74:	20004a5c 	.word	0x20004a5c

08004f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d04f      	beq.n	800502a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	425b      	negs	r3, r3
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4413      	add	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	4b25      	ldr	r3, [pc, #148]	@ (8005034 <vPortFree+0xbc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <vPortFree+0x46>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	60fb      	str	r3, [r7, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	e7fd      	b.n	8004fba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00b      	beq.n	8004fde <vPortFree+0x66>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	60bb      	str	r3, [r7, #8]
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	e7fd      	b.n	8004fda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	4b14      	ldr	r3, [pc, #80]	@ (8005034 <vPortFree+0xbc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01e      	beq.n	800502a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d11a      	bne.n	800502a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8005034 <vPortFree+0xbc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	401a      	ands	r2, r3
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005004:	f7fe fc78 	bl	80038f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	4b0a      	ldr	r3, [pc, #40]	@ (8005038 <vPortFree+0xc0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4413      	add	r3, r2
 8005012:	4a09      	ldr	r2, [pc, #36]	@ (8005038 <vPortFree+0xc0>)
 8005014:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005016:	6938      	ldr	r0, [r7, #16]
 8005018:	f000 f874 	bl	8005104 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800501c:	4b07      	ldr	r3, [pc, #28]	@ (800503c <vPortFree+0xc4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3301      	adds	r3, #1
 8005022:	4a06      	ldr	r2, [pc, #24]	@ (800503c <vPortFree+0xc4>)
 8005024:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005026:	f7fe fc75 	bl	8003914 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800502a:	bf00      	nop
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20004a64 	.word	0x20004a64
 8005038:	20004a54 	.word	0x20004a54
 800503c:	20004a60 	.word	0x20004a60

08005040 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005046:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800504a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800504c:	4b27      	ldr	r3, [pc, #156]	@ (80050ec <prvHeapInit+0xac>)
 800504e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3307      	adds	r3, #7
 800505e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0307 	bic.w	r3, r3, #7
 8005066:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	4a1f      	ldr	r2, [pc, #124]	@ (80050ec <prvHeapInit+0xac>)
 8005070:	4413      	add	r3, r2
 8005072:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005078:	4a1d      	ldr	r2, [pc, #116]	@ (80050f0 <prvHeapInit+0xb0>)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800507e:	4b1c      	ldr	r3, [pc, #112]	@ (80050f0 <prvHeapInit+0xb0>)
 8005080:	2200      	movs	r2, #0
 8005082:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	4413      	add	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800508c:	2208      	movs	r2, #8
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0307 	bic.w	r3, r3, #7
 800509a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4a15      	ldr	r2, [pc, #84]	@ (80050f4 <prvHeapInit+0xb4>)
 80050a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050a2:	4b14      	ldr	r3, [pc, #80]	@ (80050f4 <prvHeapInit+0xb4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050aa:	4b12      	ldr	r3, [pc, #72]	@ (80050f4 <prvHeapInit+0xb4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	1ad2      	subs	r2, r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050c0:	4b0c      	ldr	r3, [pc, #48]	@ (80050f4 <prvHeapInit+0xb4>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4a0a      	ldr	r2, [pc, #40]	@ (80050f8 <prvHeapInit+0xb8>)
 80050ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	4a09      	ldr	r2, [pc, #36]	@ (80050fc <prvHeapInit+0xbc>)
 80050d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050d8:	4b09      	ldr	r3, [pc, #36]	@ (8005100 <prvHeapInit+0xc0>)
 80050da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80050de:	601a      	str	r2, [r3, #0]
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	20000e48 	.word	0x20000e48
 80050f0:	20004a48 	.word	0x20004a48
 80050f4:	20004a50 	.word	0x20004a50
 80050f8:	20004a58 	.word	0x20004a58
 80050fc:	20004a54 	.word	0x20004a54
 8005100:	20004a64 	.word	0x20004a64

08005104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800510c:	4b28      	ldr	r3, [pc, #160]	@ (80051b0 <prvInsertBlockIntoFreeList+0xac>)
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	e002      	b.n	8005118 <prvInsertBlockIntoFreeList+0x14>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d8f7      	bhi.n	8005112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	4413      	add	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d108      	bne.n	8005146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	441a      	add	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	441a      	add	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d118      	bne.n	800518c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4b15      	ldr	r3, [pc, #84]	@ (80051b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d00d      	beq.n	8005182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	441a      	add	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e008      	b.n	8005194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005182:	4b0c      	ldr	r3, [pc, #48]	@ (80051b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e003      	b.n	8005194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	d002      	beq.n	80051a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20004a48 	.word	0x20004a48
 80051b4:	20004a50 	.word	0x20004a50

080051b8 <malloc>:
 80051b8:	4b02      	ldr	r3, [pc, #8]	@ (80051c4 <malloc+0xc>)
 80051ba:	4601      	mov	r1, r0
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	f000 b825 	b.w	800520c <_malloc_r>
 80051c2:	bf00      	nop
 80051c4:	20000010 	.word	0x20000010

080051c8 <sbrk_aligned>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005208 <sbrk_aligned+0x40>)
 80051cc:	460c      	mov	r4, r1
 80051ce:	6831      	ldr	r1, [r6, #0]
 80051d0:	4605      	mov	r5, r0
 80051d2:	b911      	cbnz	r1, 80051da <sbrk_aligned+0x12>
 80051d4:	f000 f8ae 	bl	8005334 <_sbrk_r>
 80051d8:	6030      	str	r0, [r6, #0]
 80051da:	4621      	mov	r1, r4
 80051dc:	4628      	mov	r0, r5
 80051de:	f000 f8a9 	bl	8005334 <_sbrk_r>
 80051e2:	1c43      	adds	r3, r0, #1
 80051e4:	d103      	bne.n	80051ee <sbrk_aligned+0x26>
 80051e6:	f04f 34ff 	mov.w	r4, #4294967295
 80051ea:	4620      	mov	r0, r4
 80051ec:	bd70      	pop	{r4, r5, r6, pc}
 80051ee:	1cc4      	adds	r4, r0, #3
 80051f0:	f024 0403 	bic.w	r4, r4, #3
 80051f4:	42a0      	cmp	r0, r4
 80051f6:	d0f8      	beq.n	80051ea <sbrk_aligned+0x22>
 80051f8:	1a21      	subs	r1, r4, r0
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 f89a 	bl	8005334 <_sbrk_r>
 8005200:	3001      	adds	r0, #1
 8005202:	d1f2      	bne.n	80051ea <sbrk_aligned+0x22>
 8005204:	e7ef      	b.n	80051e6 <sbrk_aligned+0x1e>
 8005206:	bf00      	nop
 8005208:	20004a68 	.word	0x20004a68

0800520c <_malloc_r>:
 800520c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005210:	1ccd      	adds	r5, r1, #3
 8005212:	f025 0503 	bic.w	r5, r5, #3
 8005216:	3508      	adds	r5, #8
 8005218:	2d0c      	cmp	r5, #12
 800521a:	bf38      	it	cc
 800521c:	250c      	movcc	r5, #12
 800521e:	2d00      	cmp	r5, #0
 8005220:	4606      	mov	r6, r0
 8005222:	db01      	blt.n	8005228 <_malloc_r+0x1c>
 8005224:	42a9      	cmp	r1, r5
 8005226:	d904      	bls.n	8005232 <_malloc_r+0x26>
 8005228:	230c      	movs	r3, #12
 800522a:	6033      	str	r3, [r6, #0]
 800522c:	2000      	movs	r0, #0
 800522e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005232:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005308 <_malloc_r+0xfc>
 8005236:	f000 f869 	bl	800530c <__malloc_lock>
 800523a:	f8d8 3000 	ldr.w	r3, [r8]
 800523e:	461c      	mov	r4, r3
 8005240:	bb44      	cbnz	r4, 8005294 <_malloc_r+0x88>
 8005242:	4629      	mov	r1, r5
 8005244:	4630      	mov	r0, r6
 8005246:	f7ff ffbf 	bl	80051c8 <sbrk_aligned>
 800524a:	1c43      	adds	r3, r0, #1
 800524c:	4604      	mov	r4, r0
 800524e:	d158      	bne.n	8005302 <_malloc_r+0xf6>
 8005250:	f8d8 4000 	ldr.w	r4, [r8]
 8005254:	4627      	mov	r7, r4
 8005256:	2f00      	cmp	r7, #0
 8005258:	d143      	bne.n	80052e2 <_malloc_r+0xd6>
 800525a:	2c00      	cmp	r4, #0
 800525c:	d04b      	beq.n	80052f6 <_malloc_r+0xea>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	4639      	mov	r1, r7
 8005262:	4630      	mov	r0, r6
 8005264:	eb04 0903 	add.w	r9, r4, r3
 8005268:	f000 f864 	bl	8005334 <_sbrk_r>
 800526c:	4581      	cmp	r9, r0
 800526e:	d142      	bne.n	80052f6 <_malloc_r+0xea>
 8005270:	6821      	ldr	r1, [r4, #0]
 8005272:	1a6d      	subs	r5, r5, r1
 8005274:	4629      	mov	r1, r5
 8005276:	4630      	mov	r0, r6
 8005278:	f7ff ffa6 	bl	80051c8 <sbrk_aligned>
 800527c:	3001      	adds	r0, #1
 800527e:	d03a      	beq.n	80052f6 <_malloc_r+0xea>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	442b      	add	r3, r5
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	f8d8 3000 	ldr.w	r3, [r8]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	bb62      	cbnz	r2, 80052e8 <_malloc_r+0xdc>
 800528e:	f8c8 7000 	str.w	r7, [r8]
 8005292:	e00f      	b.n	80052b4 <_malloc_r+0xa8>
 8005294:	6822      	ldr	r2, [r4, #0]
 8005296:	1b52      	subs	r2, r2, r5
 8005298:	d420      	bmi.n	80052dc <_malloc_r+0xd0>
 800529a:	2a0b      	cmp	r2, #11
 800529c:	d917      	bls.n	80052ce <_malloc_r+0xc2>
 800529e:	1961      	adds	r1, r4, r5
 80052a0:	42a3      	cmp	r3, r4
 80052a2:	6025      	str	r5, [r4, #0]
 80052a4:	bf18      	it	ne
 80052a6:	6059      	strne	r1, [r3, #4]
 80052a8:	6863      	ldr	r3, [r4, #4]
 80052aa:	bf08      	it	eq
 80052ac:	f8c8 1000 	streq.w	r1, [r8]
 80052b0:	5162      	str	r2, [r4, r5]
 80052b2:	604b      	str	r3, [r1, #4]
 80052b4:	4630      	mov	r0, r6
 80052b6:	f000 f82f 	bl	8005318 <__malloc_unlock>
 80052ba:	f104 000b 	add.w	r0, r4, #11
 80052be:	1d23      	adds	r3, r4, #4
 80052c0:	f020 0007 	bic.w	r0, r0, #7
 80052c4:	1ac2      	subs	r2, r0, r3
 80052c6:	bf1c      	itt	ne
 80052c8:	1a1b      	subne	r3, r3, r0
 80052ca:	50a3      	strne	r3, [r4, r2]
 80052cc:	e7af      	b.n	800522e <_malloc_r+0x22>
 80052ce:	6862      	ldr	r2, [r4, #4]
 80052d0:	42a3      	cmp	r3, r4
 80052d2:	bf0c      	ite	eq
 80052d4:	f8c8 2000 	streq.w	r2, [r8]
 80052d8:	605a      	strne	r2, [r3, #4]
 80052da:	e7eb      	b.n	80052b4 <_malloc_r+0xa8>
 80052dc:	4623      	mov	r3, r4
 80052de:	6864      	ldr	r4, [r4, #4]
 80052e0:	e7ae      	b.n	8005240 <_malloc_r+0x34>
 80052e2:	463c      	mov	r4, r7
 80052e4:	687f      	ldr	r7, [r7, #4]
 80052e6:	e7b6      	b.n	8005256 <_malloc_r+0x4a>
 80052e8:	461a      	mov	r2, r3
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	42a3      	cmp	r3, r4
 80052ee:	d1fb      	bne.n	80052e8 <_malloc_r+0xdc>
 80052f0:	2300      	movs	r3, #0
 80052f2:	6053      	str	r3, [r2, #4]
 80052f4:	e7de      	b.n	80052b4 <_malloc_r+0xa8>
 80052f6:	230c      	movs	r3, #12
 80052f8:	6033      	str	r3, [r6, #0]
 80052fa:	4630      	mov	r0, r6
 80052fc:	f000 f80c 	bl	8005318 <__malloc_unlock>
 8005300:	e794      	b.n	800522c <_malloc_r+0x20>
 8005302:	6005      	str	r5, [r0, #0]
 8005304:	e7d6      	b.n	80052b4 <_malloc_r+0xa8>
 8005306:	bf00      	nop
 8005308:	20004a6c 	.word	0x20004a6c

0800530c <__malloc_lock>:
 800530c:	4801      	ldr	r0, [pc, #4]	@ (8005314 <__malloc_lock+0x8>)
 800530e:	f000 b84b 	b.w	80053a8 <__retarget_lock_acquire_recursive>
 8005312:	bf00      	nop
 8005314:	20004bac 	.word	0x20004bac

08005318 <__malloc_unlock>:
 8005318:	4801      	ldr	r0, [pc, #4]	@ (8005320 <__malloc_unlock+0x8>)
 800531a:	f000 b846 	b.w	80053aa <__retarget_lock_release_recursive>
 800531e:	bf00      	nop
 8005320:	20004bac 	.word	0x20004bac

08005324 <memset>:
 8005324:	4402      	add	r2, r0
 8005326:	4603      	mov	r3, r0
 8005328:	4293      	cmp	r3, r2
 800532a:	d100      	bne.n	800532e <memset+0xa>
 800532c:	4770      	bx	lr
 800532e:	f803 1b01 	strb.w	r1, [r3], #1
 8005332:	e7f9      	b.n	8005328 <memset+0x4>

08005334 <_sbrk_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d06      	ldr	r5, [pc, #24]	@ (8005350 <_sbrk_r+0x1c>)
 8005338:	2300      	movs	r3, #0
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	602b      	str	r3, [r5, #0]
 8005340:	f7fb fbda 	bl	8000af8 <_sbrk>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_sbrk_r+0x1a>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_sbrk_r+0x1a>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	20004ba8 	.word	0x20004ba8

08005354 <__errno>:
 8005354:	4b01      	ldr	r3, [pc, #4]	@ (800535c <__errno+0x8>)
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000010 	.word	0x20000010

08005360 <__libc_init_array>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	4d0d      	ldr	r5, [pc, #52]	@ (8005398 <__libc_init_array+0x38>)
 8005364:	4c0d      	ldr	r4, [pc, #52]	@ (800539c <__libc_init_array+0x3c>)
 8005366:	1b64      	subs	r4, r4, r5
 8005368:	10a4      	asrs	r4, r4, #2
 800536a:	2600      	movs	r6, #0
 800536c:	42a6      	cmp	r6, r4
 800536e:	d109      	bne.n	8005384 <__libc_init_array+0x24>
 8005370:	4d0b      	ldr	r5, [pc, #44]	@ (80053a0 <__libc_init_array+0x40>)
 8005372:	4c0c      	ldr	r4, [pc, #48]	@ (80053a4 <__libc_init_array+0x44>)
 8005374:	f000 f828 	bl	80053c8 <_init>
 8005378:	1b64      	subs	r4, r4, r5
 800537a:	10a4      	asrs	r4, r4, #2
 800537c:	2600      	movs	r6, #0
 800537e:	42a6      	cmp	r6, r4
 8005380:	d105      	bne.n	800538e <__libc_init_array+0x2e>
 8005382:	bd70      	pop	{r4, r5, r6, pc}
 8005384:	f855 3b04 	ldr.w	r3, [r5], #4
 8005388:	4798      	blx	r3
 800538a:	3601      	adds	r6, #1
 800538c:	e7ee      	b.n	800536c <__libc_init_array+0xc>
 800538e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005392:	4798      	blx	r3
 8005394:	3601      	adds	r6, #1
 8005396:	e7f2      	b.n	800537e <__libc_init_array+0x1e>
 8005398:	08005448 	.word	0x08005448
 800539c:	08005448 	.word	0x08005448
 80053a0:	08005448 	.word	0x08005448
 80053a4:	0800544c 	.word	0x0800544c

080053a8 <__retarget_lock_acquire_recursive>:
 80053a8:	4770      	bx	lr

080053aa <__retarget_lock_release_recursive>:
 80053aa:	4770      	bx	lr

080053ac <memcpy>:
 80053ac:	440a      	add	r2, r1
 80053ae:	4291      	cmp	r1, r2
 80053b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80053b4:	d100      	bne.n	80053b8 <memcpy+0xc>
 80053b6:	4770      	bx	lr
 80053b8:	b510      	push	{r4, lr}
 80053ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053c2:	4291      	cmp	r1, r2
 80053c4:	d1f9      	bne.n	80053ba <memcpy+0xe>
 80053c6:	bd10      	pop	{r4, pc}

080053c8 <_init>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	bf00      	nop
 80053cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ce:	bc08      	pop	{r3}
 80053d0:	469e      	mov	lr, r3
 80053d2:	4770      	bx	lr

080053d4 <_fini>:
 80053d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d6:	bf00      	nop
 80053d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053da:	bc08      	pop	{r3}
 80053dc:	469e      	mov	lr, r3
 80053de:	4770      	bx	lr
